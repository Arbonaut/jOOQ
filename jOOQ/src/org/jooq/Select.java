/**
 * Copyright (c) 2010, Lukas Eder, lukas.eder@gmail.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * . Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * . Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * . Neither the name of the "jOOQ" nor the names of its contributors may be
 *   used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package org.jooq;

import java.sql.SQLException;
import java.util.List;

/**
 * A {@link Query} that can provide a {@link Result} after execution
 * 
 * @author Lukas Eder
 */
public interface Select<R extends Record> extends Query, TableLike<R>, FieldLike, FieldProvider {

    /**
     * Return the result generated by a previous call to execute();
     * 
     * @return The result or <code>null</code> if no call to execute() was done
     *         previously.
     */
    Result<R> getResult();

    /**
     * Execute the query and return the generated result
     * <p>
     * This is the same as calling {@link #execute()} and then
     * {@link #getResult()}
     * 
     * @return The result.
     */
    Result<R> fetch() throws SQLException;

    /**
     * Execute the query and return all values for a field from the generated
     * result.
     * <p>
     * This is the same as calling {@link #fetch()} and then
     * {@link Result#getValues(Field)}
     * 
     * @return The resulting values.
     */
    <T> List<T> fetch(Field<T> field) throws SQLException;

    /**
     * Execute the query and return at most one resulting record.
     * <p>
     * 
     * @return The resulting record or <code>null</code> if the query returns no
     *         records.
     * @throws SQLException - If something went wrong executing the query or if
     *             the query returned more than one record.
     */
    R fetchOne() throws SQLException;

    /**
     * Execute the query and return at most one resulting record.
     * 
     * @return The first resulting record or <code>null</code> if the query
     *         returns no records.
     */
    R fetchAny() throws SQLException;

    /**
     * Combine with other selects
     */
    Select<R> union(Select<R> select);

    /**
     * Combine with other selects
     */
    Select<R> unionAll(Select<R> select);

    /**
     * Combine with other selects
     */
    Select<R> except(Select<R> select);

    /**
     * Combine with other selects
     */
    Select<R> intersect(Select<R> select);

    /**
     * The record type produced by this query
     */
    Class<? extends R> getRecordType();

    /**
     * All fields selected in this query
     */
    List<Field<?>> getSelect();
}
