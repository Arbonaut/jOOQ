/**
 * This class is generated by jOOQ
 */
package org.jooq.test.h2.generatedclasses.tables.records;


import java.sql.Date;
import java.sql.SQLException;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.test.h2.generatedclasses.tables.TAuthor;
import org.jooq.test.h2.generatedclasses.tables.TBook;


/**
 * This class is generated by jOOQ.
 *
 * An entity holding authors of books
 */
@Generated(value    = "http://jooq.sourceforge.net",
           comments = "This class is generated by jOOQ")
public class TAuthorRecord extends UpdatableRecordImpl<TAuthorRecord> {

	private static final long serialVersionUID = 885096401;

	/**
	 * The author ID
	 * 
	 * PRIMARY KEY
	 */
	public void setId(Integer value) {
		setValue(TAuthor.ID, value);
	}

	/**
	 * The author ID
	 * 
	 * PRIMARY KEY
	 */
	public Integer getId() {
		return getValue(TAuthor.ID);
	}

	/**
	 * The author ID
	 * 
	 * PRIMARY KEY
	 */
	public List<TBookRecord> fetchTBookListByAuthorId() throws SQLException {
		return create()
			.selectFrom(TBook.T_BOOK)
			.where(TBook.AUTHOR_ID.equal(getValue(TAuthor.ID)))
			.fetch()
			.getRecords();
	}

	/**
	 * The author ID
	 * 
	 * PRIMARY KEY
	 *
	 * @deprecated Because of risk of ambiguity (#187), code generation for this<br/>
	 *             method will not be supported anymore, soon.<br/><br/>
	 *             If you wish to remove this method, adapt your configuration:<br/>
	 *             <code>generator.generate.deprecated=false</code>
	 */
	@Deprecated
	public List<TBookRecord> getTBookListByAuthorId() throws SQLException {
		return create()
			.selectFrom(TBook.T_BOOK)
			.where(TBook.AUTHOR_ID.equal(getValue(TAuthor.ID)))
			.fetch()
			.getRecords();
	}

	/**
	 * The author ID
	 * 
	 * PRIMARY KEY
	 */
	public List<TBookRecord> fetchTBookListByCoAuthorId() throws SQLException {
		return create()
			.selectFrom(TBook.T_BOOK)
			.where(TBook.CO_AUTHOR_ID.equal(getValue(TAuthor.ID)))
			.fetch()
			.getRecords();
	}

	/**
	 * The author ID
	 * 
	 * PRIMARY KEY
	 *
	 * @deprecated Because of risk of ambiguity (#187), code generation for this<br/>
	 *             method will not be supported anymore, soon.<br/><br/>
	 *             If you wish to remove this method, adapt your configuration:<br/>
	 *             <code>generator.generate.deprecated=false</code>
	 */
	@Deprecated
	public List<TBookRecord> getTBookListByCoAuthorId() throws SQLException {
		return create()
			.selectFrom(TBook.T_BOOK)
			.where(TBook.CO_AUTHOR_ID.equal(getValue(TAuthor.ID)))
			.fetch()
			.getRecords();
	}

	/**
	 * The author's first name
	 */
	public void setFirstName(String value) {
		setValue(TAuthor.FIRST_NAME, value);
	}

	/**
	 * The author's first name
	 */
	public String getFirstName() {
		return getValue(TAuthor.FIRST_NAME);
	}

	/**
	 * The author's last name
	 */
	public void setLastName(String value) {
		setValue(TAuthor.LAST_NAME, value);
	}

	/**
	 * The author's last name
	 */
	public String getLastName() {
		return getValue(TAuthor.LAST_NAME);
	}

	/**
	 * The author's date of birth
	 */
	public void setDateOfBirth(Date value) {
		setValue(TAuthor.DATE_OF_BIRTH, value);
	}

	/**
	 * The author's date of birth
	 */
	public Date getDateOfBirth() {
		return getValue(TAuthor.DATE_OF_BIRTH);
	}

	/**
	 * The author's year of birth
	 */
	public void setYearOfBirth(Integer value) {
		setValue(TAuthor.YEAR_OF_BIRTH, value);
	}

	/**
	 * The author's year of birth
	 */
	public Integer getYearOfBirth() {
		return getValue(TAuthor.YEAR_OF_BIRTH);
	}

	/**
	 * The author's address
	 */
	public void setAddress(String value) {
		setValue(TAuthor.ADDRESS, value);
	}

	/**
	 * The author's address
	 */
	public String getAddress() {
		return getValue(TAuthor.ADDRESS);
	}
	/**
	 * Create a detached TAuthorRecord
	 */
	public TAuthorRecord() {
		super(TAuthor.T_AUTHOR);
	}

	/**
	 * Create an attached TAuthorRecord
	 */
	public TAuthorRecord(Configuration configuration) {
		super(TAuthor.T_AUTHOR, configuration);
	}
}
