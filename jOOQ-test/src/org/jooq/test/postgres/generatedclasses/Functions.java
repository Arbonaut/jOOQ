/**
 * This class is generated by jOOQ
 */
package org.jooq.test.postgres.generatedclasses;


import java.sql.Connection;
import java.sql.SQLException;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.test.postgres.generatedclasses.functions.F317;
import org.jooq.test.postgres.generatedclasses.functions.FArrays1;
import org.jooq.test.postgres.generatedclasses.functions.FArrays2;
import org.jooq.test.postgres.generatedclasses.functions.FArrays3;
import org.jooq.test.postgres.generatedclasses.functions.FAuthorExists;
import org.jooq.test.postgres.generatedclasses.functions.FNumber;
import org.jooq.test.postgres.generatedclasses.functions.FOne;


/**
 * This class is generated by jOOQ.
 *
 * Convenience access to all stored functions in public
 */
@Generated(value    = "http://jooq.sourceforge.net",
           comments = "This class is generated by jOOQ")
public final class Functions {

	/**
	 * Invoke F_ARRAYS
	 *
	 * @param inArray
	 */
	public static Integer[] fArrays1(Connection connection, Integer[] inArray) throws SQLException {
		FArrays1 f = new FArrays1();
		f.setInArray(inArray);

		f.execute(connection);
		return f.getReturnValue();
	}

	/**
	 * Get F_ARRAYS as a field
	 *
	 * @param inArray
	 */
	public static Field<Integer[]> fArrays1(Integer[] inArray) {
		FArrays1 f = new FArrays1();
		f.setInArray(inArray);

		return f.asField();
	}

	/**
	 * Get F_ARRAYS as a field
	 *
	 * @param inArray
	 */
	public static Field<Integer[]> fArrays1(Field<Integer[]> inArray) {
		FArrays1 f = new FArrays1();
		f.setInArray(inArray);

		return f.asField();
	}

	/**
	 * Invoke F_ARRAYS
	 *
	 * @param inArray
	 */
	public static Long[] fArrays2(Connection connection, Long[] inArray) throws SQLException {
		FArrays2 f = new FArrays2();
		f.setInArray(inArray);

		f.execute(connection);
		return f.getReturnValue();
	}

	/**
	 * Get F_ARRAYS as a field
	 *
	 * @param inArray
	 */
	public static Field<Long[]> fArrays2(Long[] inArray) {
		FArrays2 f = new FArrays2();
		f.setInArray(inArray);

		return f.asField();
	}

	/**
	 * Get F_ARRAYS as a field
	 *
	 * @param inArray
	 */
	public static Field<Long[]> fArrays2(Field<Long[]> inArray) {
		FArrays2 f = new FArrays2();
		f.setInArray(inArray);

		return f.asField();
	}

	/**
	 * Invoke F_ARRAYS
	 *
	 * @param inArray
	 */
	public static String[] fArrays3(Connection connection, String[] inArray) throws SQLException {
		FArrays3 f = new FArrays3();
		f.setInArray(inArray);

		f.execute(connection);
		return f.getReturnValue();
	}

	/**
	 * Get F_ARRAYS as a field
	 *
	 * @param inArray
	 */
	public static Field<String[]> fArrays3(String[] inArray) {
		FArrays3 f = new FArrays3();
		f.setInArray(inArray);

		return f.asField();
	}

	/**
	 * Get F_ARRAYS as a field
	 *
	 * @param inArray
	 */
	public static Field<String[]> fArrays3(Field<String[]> inArray) {
		FArrays3 f = new FArrays3();
		f.setInArray(inArray);

		return f.asField();
	}

	/**
	 * Invoke F_AUTHOR_EXISTS
	 *
	 * @param authorName
	 */
	public static Integer fAuthorExists(Connection connection, String authorName) throws SQLException {
		FAuthorExists f = new FAuthorExists();
		f.setAuthorName(authorName);

		f.execute(connection);
		return f.getReturnValue();
	}

	/**
	 * Get F_AUTHOR_EXISTS as a field
	 *
	 * @param authorName
	 */
	public static Field<Integer> fAuthorExists(String authorName) {
		FAuthorExists f = new FAuthorExists();
		f.setAuthorName(authorName);

		return f.asField();
	}

	/**
	 * Get F_AUTHOR_EXISTS as a field
	 *
	 * @param authorName
	 */
	public static Field<Integer> fAuthorExists(Field<String> authorName) {
		FAuthorExists f = new FAuthorExists();
		f.setAuthorName(authorName);

		return f.asField();
	}

	/**
	 * Invoke F_NUMBER
	 *
	 * @param n
	 */
	public static Integer fNumber(Connection connection, Integer n) throws SQLException {
		FNumber f = new FNumber();
		f.setN(n);

		f.execute(connection);
		return f.getReturnValue();
	}

	/**
	 * Get F_NUMBER as a field
	 *
	 * @param n
	 */
	public static Field<Integer> fNumber(Integer n) {
		FNumber f = new FNumber();
		f.setN(n);

		return f.asField();
	}

	/**
	 * Get F_NUMBER as a field
	 *
	 * @param n
	 */
	public static Field<Integer> fNumber(Field<Integer> n) {
		FNumber f = new FNumber();
		f.setN(n);

		return f.asField();
	}

	/**
	 * Invoke F_ONE
	 *
	 */
	public static Integer fOne(Connection connection) throws SQLException {
		FOne f = new FOne();

		f.execute(connection);
		return f.getReturnValue();
	}

	/**
	 * Get F_ONE as a field
	 *
	 */
	public static Field<Integer> fOne() {
		FOne f = new FOne();

		return f.asField();
	}

	/**
	 * Invoke F317
	 *
	 * @param p1
	 * @param p2
	 * @param p3
	 * @param p4
	 */
	public static Integer f317(Connection connection, Integer p1, Integer p2, Integer p3, Integer p4) throws SQLException {
		F317 f = new F317();
		f.setP1(p1);
		f.setP2(p2);
		f.setP3(p3);
		f.setP4(p4);

		f.execute(connection);
		return f.getReturnValue();
	}

	/**
	 * Get F317 as a field
	 *
	 * @param p1
	 * @param p2
	 * @param p3
	 * @param p4
	 */
	public static Field<Integer> f317(Integer p1, Integer p2, Integer p3, Integer p4) {
		F317 f = new F317();
		f.setP1(p1);
		f.setP2(p2);
		f.setP3(p3);
		f.setP4(p4);

		return f.asField();
	}

	/**
	 * Get F317 as a field
	 *
	 * @param p1
	 * @param p2
	 * @param p3
	 * @param p4
	 */
	public static Field<Integer> f317(Field<Integer> p1, Field<Integer> p2, Field<Integer> p3, Field<Integer> p4) {
		F317 f = new F317();
		f.setP1(p1);
		f.setP2(p2);
		f.setP3(p3);
		f.setP4(p4);

		return f.asField();
	}

	/**
	 * No instances
	 */
	private Functions() {}
}
