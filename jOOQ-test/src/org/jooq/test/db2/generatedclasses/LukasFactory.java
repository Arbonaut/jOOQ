/**
 * This class is generated by jOOQ
 */
package org.jooq.test.db2.generatedclasses;

/**
 * This class is generated by jOOQ.
 *
 * A Factory for specific use with the <code>LUKAS</code> schema.
 * <p>
 * This Factory will not render the <code>LUKAS</code> schema's schema name 
 * in rendered SQL (assuming that you use it as the default schema on your 
 * connection!). Use the more generic {@link org.jooq.util.db2.DB2Factory} 
 * or the {@link org.jooq.impl.Factory} instead, if you want to fully qualify 
 * tables, routines, etc.
 */
public class LukasFactory extends org.jooq.util.db2.DB2Factory {

	private static final long serialVersionUID = 707653306;

	/**
	 * Create a factory with a connection
	 *
	 * @param connection The connection to use with objects created from this factory
	 */
	public LukasFactory(java.sql.Connection connection) {
		super(connection);

		initDefaultSchema();
	}

	/**
	 * Create a factory with a connection and a schema mapping
	 * 
	 * @deprecated - 2.0.5 - Use {@link #LukasFactory(java.sql.Connection, org.jooq.conf.Settings)} instead
	 */
	@Deprecated
	public LukasFactory(java.sql.Connection connection, org.jooq.SchemaMapping mapping) {
		super(connection, mapping);

		initDefaultSchema();
	}

	/**
	 * Create a factory with a connection and some settings
	 *
	 * @param connection The connection to use with objects created from this factory
	 * @param settings The settings to apply to objects created from this factory
	 */
	public LukasFactory(java.sql.Connection connection, org.jooq.conf.Settings settings) {
		super(connection, settings);

		initDefaultSchema();
	}

	/**
	 * Initialise the render mapping's default schema.
	 * <p>
	 * For convenience, this schema-specific factory should override any pre-existing setting
	 */
	private final void initDefaultSchema() {
		org.jooq.conf.SettingsTools.getRenderMapping(getSettings()).setDefaultSchema(org.jooq.test.db2.generatedclasses.Lukas.LUKAS.getName());
	}
}
