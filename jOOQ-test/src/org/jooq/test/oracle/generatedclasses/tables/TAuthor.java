/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oracle.generatedclasses.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableFieldImpl;
import org.jooq.impl.UpdatableTableImpl;
import org.jooq.test.oracle.generatedclasses.Keys;
import org.jooq.test.oracle.generatedclasses.Test;
import org.jooq.test.oracle.generatedclasses.tables.records.TAuthorRecord;
import org.jooq.test.oracle.generatedclasses.udt.UAddressType;
import org.jooq.test.oracle.generatedclasses.udt.records.UAddressTypeRecord;


/**
 * This class is generated by jOOQ.
 *
 * An entity holding authors of books
 */
@Generated(value    = "http://jooq.sourceforge.net",
           comments = "This class is generated by jOOQ")
public class TAuthor extends UpdatableTableImpl<TAuthorRecord> {

	private static final long serialVersionUID = 2032726838;

	/**
	 * The singleton instance of T_AUTHOR
	 */
	public static final TAuthor T_AUTHOR = new TAuthor();

	/**
	 * The class holding records for this type
	 */
	private static final Class<TAuthorRecord> __RECORD_TYPE = TAuthorRecord.class;

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TAuthorRecord> getRecordType() {
		return __RECORD_TYPE;
	}

	/**
	 * The author ID
	 * 
	 * PRIMARY KEY
	 */
	public static final TableField<TAuthorRecord, Integer> ID = new TableFieldImpl<TAuthorRecord, Integer>("ID", SQLDataType.INTEGER, T_AUTHOR);

	/**
	 * The author's first name
	 */
	public static final TableField<TAuthorRecord, String> FIRST_NAME = new TableFieldImpl<TAuthorRecord, String>("FIRST_NAME", SQLDataType.VARCHAR, T_AUTHOR);

	/**
	 * The author's last name
	 */
	public static final TableField<TAuthorRecord, String> LAST_NAME = new TableFieldImpl<TAuthorRecord, String>("LAST_NAME", SQLDataType.VARCHAR, T_AUTHOR);

	/**
	 * The author's date of birth
	 */
	public static final TableField<TAuthorRecord, Date> DATE_OF_BIRTH = new TableFieldImpl<TAuthorRecord, Date>("DATE_OF_BIRTH", SQLDataType.DATE, T_AUTHOR);

	/**
	 * The author's year of birth
	 */
	public static final TableField<TAuthorRecord, Integer> YEAR_OF_BIRTH = new TableFieldImpl<TAuthorRecord, Integer>("YEAR_OF_BIRTH", SQLDataType.INTEGER, T_AUTHOR);

	/**
	 * The author's address
	 */
	public static final TableField<TAuthorRecord, UAddressTypeRecord> ADDRESS = new TableFieldImpl<TAuthorRecord, UAddressTypeRecord>("ADDRESS", UAddressType.U_ADDRESS_TYPE.getDataType(), T_AUTHOR);

	/**
	 * No further instances allowed
	 */
	private TAuthor() {
		super("T_AUTHOR", Test.TEST);
	}

	@Override
	public UniqueKey<TAuthorRecord> getMainKey() {
		return Keys.PK_T_AUTHOR;
	}

	@Override
	@SuppressWarnings("unchecked")
	public List<UniqueKey<TAuthorRecord>> getKeys() {
		return Arrays.<UniqueKey<TAuthorRecord>>asList(Keys.PK_T_AUTHOR);
	}
}
