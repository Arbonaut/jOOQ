/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oracle.generatedclasses.functions;


import java.math.BigDecimal;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Parameter;
import org.jooq.SQLDialect;
import org.jooq.Select;
import org.jooq.impl.ParameterImpl;
import org.jooq.impl.StoredFunctionImpl;
import org.jooq.test.oracle.generatedclasses.Test;
import org.jooq.util.oracle.OracleDataType;


/**
 * This class is generated by jOOQ.
 */
@Generated(value    = "http://jooq.sourceforge.net",
           comments = "This class is generated by jOOQ")
public class FManyParameters extends StoredFunctionImpl<BigDecimal> {

	private static final long serialVersionUID = -547088536;


	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F000 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F000", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F001 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F001", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F002 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F002", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F003 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F003", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F004 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F004", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F005 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F005", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F006 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F006", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F007 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F007", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F008 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F008", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F009 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F009", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F010 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F010", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F011 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F011", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F012 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F012", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F013 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F013", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F014 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F014", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F015 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F015", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F016 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F016", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F017 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F017", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F018 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F018", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F019 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F019", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F020 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F020", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F021 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F021", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F022 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F022", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F023 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F023", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F024 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F024", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F025 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F025", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F026 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F026", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F027 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F027", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F028 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F028", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F029 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F029", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F030 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F030", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F031 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F031", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F032 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F032", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F033 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F033", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F034 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F034", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F035 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F035", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F036 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F036", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F037 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F037", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F038 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F038", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F039 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F039", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F040 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F040", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F041 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F041", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F042 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F042", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F043 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F043", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F044 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F044", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F045 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F045", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F046 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F046", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F047 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F047", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F048 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F048", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F049 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F049", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F050 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F050", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F051 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F051", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F052 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F052", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F053 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F053", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F054 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F054", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F055 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F055", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F056 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F056", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F057 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F057", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F058 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F058", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F059 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F059", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F060 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F060", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F061 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F061", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F062 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F062", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F063 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F063", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F064 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F064", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F065 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F065", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F066 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F066", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F067 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F067", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F068 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F068", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F069 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F069", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F070 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F070", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F071 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F071", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F072 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F072", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F073 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F073", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F074 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F074", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F075 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F075", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F076 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F076", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F077 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F077", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F078 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F078", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F079 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F079", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F080 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F080", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F081 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F081", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F082 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F082", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F083 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F083", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F084 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F084", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F085 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F085", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F086 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F086", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F087 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F087", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F088 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F088", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F089 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F089", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F090 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F090", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F091 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F091", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F092 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F092", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F093 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F093", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F094 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F094", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F095 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F095", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F096 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F096", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F097 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F097", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F098 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F098", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F099 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F099", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F100 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F100", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F101 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F101", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F102 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F102", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F103 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F103", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F104 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F104", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F105 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F105", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F106 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F106", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F107 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F107", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F108 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F108", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F109 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F109", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F110 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F110", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F111 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F111", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F112 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F112", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F113 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F113", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F114 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F114", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F115 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F115", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F116 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F116", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F117 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F117", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F118 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F118", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F119 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F119", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F120 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F120", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F121 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F121", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F122 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F122", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F123 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F123", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F124 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F124", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F125 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F125", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F126 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F126", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F127 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F127", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F128 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F128", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F129 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F129", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F130 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F130", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F131 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F131", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F132 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F132", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F133 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F133", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F134 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F134", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F135 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F135", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F136 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F136", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F137 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F137", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F138 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F138", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F139 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F139", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F140 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F140", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F141 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F141", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F142 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F142", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F143 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F143", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F144 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F144", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F145 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F145", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F146 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F146", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F147 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F147", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F148 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F148", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F149 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F149", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F150 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F150", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F151 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F151", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F152 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F152", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F153 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F153", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F154 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F154", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F155 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F155", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F156 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F156", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F157 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F157", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F158 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F158", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F159 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F159", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F160 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F160", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F161 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F161", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F162 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F162", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F163 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F163", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F164 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F164", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F165 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F165", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F166 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F166", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F167 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F167", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F168 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F168", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F169 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F169", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F170 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F170", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F171 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F171", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F172 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F172", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F173 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F173", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F174 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F174", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F175 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F175", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F176 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F176", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F177 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F177", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F178 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F178", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F179 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F179", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F180 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F180", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F181 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F181", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F182 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F182", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F183 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F183", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F184 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F184", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F185 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F185", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F186 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F186", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F187 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F187", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F188 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F188", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F189 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F189", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F190 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F190", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F191 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F191", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F192 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F192", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F193 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F193", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F194 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F194", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F195 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F195", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F196 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F196", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F197 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F197", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F198 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F198", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F199 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F199", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F200 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F200", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F201 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F201", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F202 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F202", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F203 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F203", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F204 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F204", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F205 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F205", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F206 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F206", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F207 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F207", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F208 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F208", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F209 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F209", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F210 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F210", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F211 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F211", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F212 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F212", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F213 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F213", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F214 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F214", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F215 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F215", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F216 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F216", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F217 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F217", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F218 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F218", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F219 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F219", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F220 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F220", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F221 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F221", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F222 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F222", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F223 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F223", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F224 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F224", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F225 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F225", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F226 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F226", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F227 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F227", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F228 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F228", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F229 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F229", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F230 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F230", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F231 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F231", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F232 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F232", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F233 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F233", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F234 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F234", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F235 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F235", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F236 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F236", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F237 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F237", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F238 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F238", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F239 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F239", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F240 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F240", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F241 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F241", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F242 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F242", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F243 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F243", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F244 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F244", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F245 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F245", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F246 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F246", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F247 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F247", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F248 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F248", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F249 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F249", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F250 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F250", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F251 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F251", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F252 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F252", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F253 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F253", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F254 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F254", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F255 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F255", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F256 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F256", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F257 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F257", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F258 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F258", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F259 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F259", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F260 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F260", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F261 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F261", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F262 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F262", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F263 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F263", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F264 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F264", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F265 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F265", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F266 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F266", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F267 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F267", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F268 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F268", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F269 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F269", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F270 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F270", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F271 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F271", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F272 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F272", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F273 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F273", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F274 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F274", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F275 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F275", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F276 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F276", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F277 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F277", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F278 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F278", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F279 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F279", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F280 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F280", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F281 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F281", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F282 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F282", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F283 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F283", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F284 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F284", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F285 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F285", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F286 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F286", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F287 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F287", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F288 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F288", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F289 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F289", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F290 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F290", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F291 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F291", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F292 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F292", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F293 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F293", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F294 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F294", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F295 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F295", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F296 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F296", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F297 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F297", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F298 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F298", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F299 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F299", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F300 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F300", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F301 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F301", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F302 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F302", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F303 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F303", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F304 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F304", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F305 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F305", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F306 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F306", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F307 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F307", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F308 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F308", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F309 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F309", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F310 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F310", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F311 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F311", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F312 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F312", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F313 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F313", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F314 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F314", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F315 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F315", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F316 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F316", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F317 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F317", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F318 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F318", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F319 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F319", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F320 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F320", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F321 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F321", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F322 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F322", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F323 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F323", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F324 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F324", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F325 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F325", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F326 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F326", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F327 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F327", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F328 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F328", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F329 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F329", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F330 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F330", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F331 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F331", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F332 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F332", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F333 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F333", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F334 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F334", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F335 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F335", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F336 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F336", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F337 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F337", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F338 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F338", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F339 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F339", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F340 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F340", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F341 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F341", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F342 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F342", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F343 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F343", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F344 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F344", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F345 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F345", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F346 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F346", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F347 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F347", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F348 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F348", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F349 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F349", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F350 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F350", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F351 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F351", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F352 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F352", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F353 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F353", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F354 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F354", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F355 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F355", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F356 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F356", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F357 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F357", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F358 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F358", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F359 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F359", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F360 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F360", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F361 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F361", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F362 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F362", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F363 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F363", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F364 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F364", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F365 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F365", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F366 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F366", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F367 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F367", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F368 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F368", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F369 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F369", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F370 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F370", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F371 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F371", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F372 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F372", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F373 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F373", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F374 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F374", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F375 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F375", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F376 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F376", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F377 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F377", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F378 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F378", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F379 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F379", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F380 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F380", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F381 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F381", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F382 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F382", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F383 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F383", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F384 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F384", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F385 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F385", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F386 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F386", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F387 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F387", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F388 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F388", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F389 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F389", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F390 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F390", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F391 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F391", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F392 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F392", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F393 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F393", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F394 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F394", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F395 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F395", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F396 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F396", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F397 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F397", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F398 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F398", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> F399 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "F399", OracleDataType.NUMBER);

	/**
	 * No further instances allowed
	 */
	public FManyParameters() {
		super(SQLDialect.ORACLE, "F_MANY_PARAMETERS", Test.TEST, OracleDataType.NUMBER);

		addInParameter(F000);
		addInParameter(F001);
		addInParameter(F002);
		addInParameter(F003);
		addInParameter(F004);
		addInParameter(F005);
		addInParameter(F006);
		addInParameter(F007);
		addInParameter(F008);
		addInParameter(F009);
		addInParameter(F010);
		addInParameter(F011);
		addInParameter(F012);
		addInParameter(F013);
		addInParameter(F014);
		addInParameter(F015);
		addInParameter(F016);
		addInParameter(F017);
		addInParameter(F018);
		addInParameter(F019);
		addInParameter(F020);
		addInParameter(F021);
		addInParameter(F022);
		addInParameter(F023);
		addInParameter(F024);
		addInParameter(F025);
		addInParameter(F026);
		addInParameter(F027);
		addInParameter(F028);
		addInParameter(F029);
		addInParameter(F030);
		addInParameter(F031);
		addInParameter(F032);
		addInParameter(F033);
		addInParameter(F034);
		addInParameter(F035);
		addInParameter(F036);
		addInParameter(F037);
		addInParameter(F038);
		addInParameter(F039);
		addInParameter(F040);
		addInParameter(F041);
		addInParameter(F042);
		addInParameter(F043);
		addInParameter(F044);
		addInParameter(F045);
		addInParameter(F046);
		addInParameter(F047);
		addInParameter(F048);
		addInParameter(F049);
		addInParameter(F050);
		addInParameter(F051);
		addInParameter(F052);
		addInParameter(F053);
		addInParameter(F054);
		addInParameter(F055);
		addInParameter(F056);
		addInParameter(F057);
		addInParameter(F058);
		addInParameter(F059);
		addInParameter(F060);
		addInParameter(F061);
		addInParameter(F062);
		addInParameter(F063);
		addInParameter(F064);
		addInParameter(F065);
		addInParameter(F066);
		addInParameter(F067);
		addInParameter(F068);
		addInParameter(F069);
		addInParameter(F070);
		addInParameter(F071);
		addInParameter(F072);
		addInParameter(F073);
		addInParameter(F074);
		addInParameter(F075);
		addInParameter(F076);
		addInParameter(F077);
		addInParameter(F078);
		addInParameter(F079);
		addInParameter(F080);
		addInParameter(F081);
		addInParameter(F082);
		addInParameter(F083);
		addInParameter(F084);
		addInParameter(F085);
		addInParameter(F086);
		addInParameter(F087);
		addInParameter(F088);
		addInParameter(F089);
		addInParameter(F090);
		addInParameter(F091);
		addInParameter(F092);
		addInParameter(F093);
		addInParameter(F094);
		addInParameter(F095);
		addInParameter(F096);
		addInParameter(F097);
		addInParameter(F098);
		addInParameter(F099);
		addInParameter(F100);
		addInParameter(F101);
		addInParameter(F102);
		addInParameter(F103);
		addInParameter(F104);
		addInParameter(F105);
		addInParameter(F106);
		addInParameter(F107);
		addInParameter(F108);
		addInParameter(F109);
		addInParameter(F110);
		addInParameter(F111);
		addInParameter(F112);
		addInParameter(F113);
		addInParameter(F114);
		addInParameter(F115);
		addInParameter(F116);
		addInParameter(F117);
		addInParameter(F118);
		addInParameter(F119);
		addInParameter(F120);
		addInParameter(F121);
		addInParameter(F122);
		addInParameter(F123);
		addInParameter(F124);
		addInParameter(F125);
		addInParameter(F126);
		addInParameter(F127);
		addInParameter(F128);
		addInParameter(F129);
		addInParameter(F130);
		addInParameter(F131);
		addInParameter(F132);
		addInParameter(F133);
		addInParameter(F134);
		addInParameter(F135);
		addInParameter(F136);
		addInParameter(F137);
		addInParameter(F138);
		addInParameter(F139);
		addInParameter(F140);
		addInParameter(F141);
		addInParameter(F142);
		addInParameter(F143);
		addInParameter(F144);
		addInParameter(F145);
		addInParameter(F146);
		addInParameter(F147);
		addInParameter(F148);
		addInParameter(F149);
		addInParameter(F150);
		addInParameter(F151);
		addInParameter(F152);
		addInParameter(F153);
		addInParameter(F154);
		addInParameter(F155);
		addInParameter(F156);
		addInParameter(F157);
		addInParameter(F158);
		addInParameter(F159);
		addInParameter(F160);
		addInParameter(F161);
		addInParameter(F162);
		addInParameter(F163);
		addInParameter(F164);
		addInParameter(F165);
		addInParameter(F166);
		addInParameter(F167);
		addInParameter(F168);
		addInParameter(F169);
		addInParameter(F170);
		addInParameter(F171);
		addInParameter(F172);
		addInParameter(F173);
		addInParameter(F174);
		addInParameter(F175);
		addInParameter(F176);
		addInParameter(F177);
		addInParameter(F178);
		addInParameter(F179);
		addInParameter(F180);
		addInParameter(F181);
		addInParameter(F182);
		addInParameter(F183);
		addInParameter(F184);
		addInParameter(F185);
		addInParameter(F186);
		addInParameter(F187);
		addInParameter(F188);
		addInParameter(F189);
		addInParameter(F190);
		addInParameter(F191);
		addInParameter(F192);
		addInParameter(F193);
		addInParameter(F194);
		addInParameter(F195);
		addInParameter(F196);
		addInParameter(F197);
		addInParameter(F198);
		addInParameter(F199);
		addInParameter(F200);
		addInParameter(F201);
		addInParameter(F202);
		addInParameter(F203);
		addInParameter(F204);
		addInParameter(F205);
		addInParameter(F206);
		addInParameter(F207);
		addInParameter(F208);
		addInParameter(F209);
		addInParameter(F210);
		addInParameter(F211);
		addInParameter(F212);
		addInParameter(F213);
		addInParameter(F214);
		addInParameter(F215);
		addInParameter(F216);
		addInParameter(F217);
		addInParameter(F218);
		addInParameter(F219);
		addInParameter(F220);
		addInParameter(F221);
		addInParameter(F222);
		addInParameter(F223);
		addInParameter(F224);
		addInParameter(F225);
		addInParameter(F226);
		addInParameter(F227);
		addInParameter(F228);
		addInParameter(F229);
		addInParameter(F230);
		addInParameter(F231);
		addInParameter(F232);
		addInParameter(F233);
		addInParameter(F234);
		addInParameter(F235);
		addInParameter(F236);
		addInParameter(F237);
		addInParameter(F238);
		addInParameter(F239);
		addInParameter(F240);
		addInParameter(F241);
		addInParameter(F242);
		addInParameter(F243);
		addInParameter(F244);
		addInParameter(F245);
		addInParameter(F246);
		addInParameter(F247);
		addInParameter(F248);
		addInParameter(F249);
		addInParameter(F250);
		addInParameter(F251);
		addInParameter(F252);
		addInParameter(F253);
		addInParameter(F254);
		addInParameter(F255);
		addInParameter(F256);
		addInParameter(F257);
		addInParameter(F258);
		addInParameter(F259);
		addInParameter(F260);
		addInParameter(F261);
		addInParameter(F262);
		addInParameter(F263);
		addInParameter(F264);
		addInParameter(F265);
		addInParameter(F266);
		addInParameter(F267);
		addInParameter(F268);
		addInParameter(F269);
		addInParameter(F270);
		addInParameter(F271);
		addInParameter(F272);
		addInParameter(F273);
		addInParameter(F274);
		addInParameter(F275);
		addInParameter(F276);
		addInParameter(F277);
		addInParameter(F278);
		addInParameter(F279);
		addInParameter(F280);
		addInParameter(F281);
		addInParameter(F282);
		addInParameter(F283);
		addInParameter(F284);
		addInParameter(F285);
		addInParameter(F286);
		addInParameter(F287);
		addInParameter(F288);
		addInParameter(F289);
		addInParameter(F290);
		addInParameter(F291);
		addInParameter(F292);
		addInParameter(F293);
		addInParameter(F294);
		addInParameter(F295);
		addInParameter(F296);
		addInParameter(F297);
		addInParameter(F298);
		addInParameter(F299);
		addInParameter(F300);
		addInParameter(F301);
		addInParameter(F302);
		addInParameter(F303);
		addInParameter(F304);
		addInParameter(F305);
		addInParameter(F306);
		addInParameter(F307);
		addInParameter(F308);
		addInParameter(F309);
		addInParameter(F310);
		addInParameter(F311);
		addInParameter(F312);
		addInParameter(F313);
		addInParameter(F314);
		addInParameter(F315);
		addInParameter(F316);
		addInParameter(F317);
		addInParameter(F318);
		addInParameter(F319);
		addInParameter(F320);
		addInParameter(F321);
		addInParameter(F322);
		addInParameter(F323);
		addInParameter(F324);
		addInParameter(F325);
		addInParameter(F326);
		addInParameter(F327);
		addInParameter(F328);
		addInParameter(F329);
		addInParameter(F330);
		addInParameter(F331);
		addInParameter(F332);
		addInParameter(F333);
		addInParameter(F334);
		addInParameter(F335);
		addInParameter(F336);
		addInParameter(F337);
		addInParameter(F338);
		addInParameter(F339);
		addInParameter(F340);
		addInParameter(F341);
		addInParameter(F342);
		addInParameter(F343);
		addInParameter(F344);
		addInParameter(F345);
		addInParameter(F346);
		addInParameter(F347);
		addInParameter(F348);
		addInParameter(F349);
		addInParameter(F350);
		addInParameter(F351);
		addInParameter(F352);
		addInParameter(F353);
		addInParameter(F354);
		addInParameter(F355);
		addInParameter(F356);
		addInParameter(F357);
		addInParameter(F358);
		addInParameter(F359);
		addInParameter(F360);
		addInParameter(F361);
		addInParameter(F362);
		addInParameter(F363);
		addInParameter(F364);
		addInParameter(F365);
		addInParameter(F366);
		addInParameter(F367);
		addInParameter(F368);
		addInParameter(F369);
		addInParameter(F370);
		addInParameter(F371);
		addInParameter(F372);
		addInParameter(F373);
		addInParameter(F374);
		addInParameter(F375);
		addInParameter(F376);
		addInParameter(F377);
		addInParameter(F378);
		addInParameter(F379);
		addInParameter(F380);
		addInParameter(F381);
		addInParameter(F382);
		addInParameter(F383);
		addInParameter(F384);
		addInParameter(F385);
		addInParameter(F386);
		addInParameter(F387);
		addInParameter(F388);
		addInParameter(F389);
		addInParameter(F390);
		addInParameter(F391);
		addInParameter(F392);
		addInParameter(F393);
		addInParameter(F394);
		addInParameter(F395);
		addInParameter(F396);
		addInParameter(F397);
		addInParameter(F398);
		addInParameter(F399);
	}

	/**
	 * Set the <code>F000</code> parameter to the function
	 */
	public void setF000(Number value) {
		setNumber(F000, value);
	}

	/**
	 * Set the <code>F000</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF000(Field<? extends Number> field) {
		setNumber(F000, field);
	}

	/**
	 * Set the <code>F001</code> parameter to the function
	 */
	public void setF001(Number value) {
		setNumber(F001, value);
	}

	/**
	 * Set the <code>F001</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF001(Field<? extends Number> field) {
		setNumber(F001, field);
	}

	/**
	 * Set the <code>F002</code> parameter to the function
	 */
	public void setF002(Number value) {
		setNumber(F002, value);
	}

	/**
	 * Set the <code>F002</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF002(Field<? extends Number> field) {
		setNumber(F002, field);
	}

	/**
	 * Set the <code>F003</code> parameter to the function
	 */
	public void setF003(Number value) {
		setNumber(F003, value);
	}

	/**
	 * Set the <code>F003</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF003(Field<? extends Number> field) {
		setNumber(F003, field);
	}

	/**
	 * Set the <code>F004</code> parameter to the function
	 */
	public void setF004(Number value) {
		setNumber(F004, value);
	}

	/**
	 * Set the <code>F004</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF004(Field<? extends Number> field) {
		setNumber(F004, field);
	}

	/**
	 * Set the <code>F005</code> parameter to the function
	 */
	public void setF005(Number value) {
		setNumber(F005, value);
	}

	/**
	 * Set the <code>F005</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF005(Field<? extends Number> field) {
		setNumber(F005, field);
	}

	/**
	 * Set the <code>F006</code> parameter to the function
	 */
	public void setF006(Number value) {
		setNumber(F006, value);
	}

	/**
	 * Set the <code>F006</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF006(Field<? extends Number> field) {
		setNumber(F006, field);
	}

	/**
	 * Set the <code>F007</code> parameter to the function
	 */
	public void setF007(Number value) {
		setNumber(F007, value);
	}

	/**
	 * Set the <code>F007</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF007(Field<? extends Number> field) {
		setNumber(F007, field);
	}

	/**
	 * Set the <code>F008</code> parameter to the function
	 */
	public void setF008(Number value) {
		setNumber(F008, value);
	}

	/**
	 * Set the <code>F008</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF008(Field<? extends Number> field) {
		setNumber(F008, field);
	}

	/**
	 * Set the <code>F009</code> parameter to the function
	 */
	public void setF009(Number value) {
		setNumber(F009, value);
	}

	/**
	 * Set the <code>F009</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF009(Field<? extends Number> field) {
		setNumber(F009, field);
	}

	/**
	 * Set the <code>F010</code> parameter to the function
	 */
	public void setF010(Number value) {
		setNumber(F010, value);
	}

	/**
	 * Set the <code>F010</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF010(Field<? extends Number> field) {
		setNumber(F010, field);
	}

	/**
	 * Set the <code>F011</code> parameter to the function
	 */
	public void setF011(Number value) {
		setNumber(F011, value);
	}

	/**
	 * Set the <code>F011</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF011(Field<? extends Number> field) {
		setNumber(F011, field);
	}

	/**
	 * Set the <code>F012</code> parameter to the function
	 */
	public void setF012(Number value) {
		setNumber(F012, value);
	}

	/**
	 * Set the <code>F012</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF012(Field<? extends Number> field) {
		setNumber(F012, field);
	}

	/**
	 * Set the <code>F013</code> parameter to the function
	 */
	public void setF013(Number value) {
		setNumber(F013, value);
	}

	/**
	 * Set the <code>F013</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF013(Field<? extends Number> field) {
		setNumber(F013, field);
	}

	/**
	 * Set the <code>F014</code> parameter to the function
	 */
	public void setF014(Number value) {
		setNumber(F014, value);
	}

	/**
	 * Set the <code>F014</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF014(Field<? extends Number> field) {
		setNumber(F014, field);
	}

	/**
	 * Set the <code>F015</code> parameter to the function
	 */
	public void setF015(Number value) {
		setNumber(F015, value);
	}

	/**
	 * Set the <code>F015</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF015(Field<? extends Number> field) {
		setNumber(F015, field);
	}

	/**
	 * Set the <code>F016</code> parameter to the function
	 */
	public void setF016(Number value) {
		setNumber(F016, value);
	}

	/**
	 * Set the <code>F016</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF016(Field<? extends Number> field) {
		setNumber(F016, field);
	}

	/**
	 * Set the <code>F017</code> parameter to the function
	 */
	public void setF017(Number value) {
		setNumber(F017, value);
	}

	/**
	 * Set the <code>F017</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF017(Field<? extends Number> field) {
		setNumber(F017, field);
	}

	/**
	 * Set the <code>F018</code> parameter to the function
	 */
	public void setF018(Number value) {
		setNumber(F018, value);
	}

	/**
	 * Set the <code>F018</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF018(Field<? extends Number> field) {
		setNumber(F018, field);
	}

	/**
	 * Set the <code>F019</code> parameter to the function
	 */
	public void setF019(Number value) {
		setNumber(F019, value);
	}

	/**
	 * Set the <code>F019</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF019(Field<? extends Number> field) {
		setNumber(F019, field);
	}

	/**
	 * Set the <code>F020</code> parameter to the function
	 */
	public void setF020(Number value) {
		setNumber(F020, value);
	}

	/**
	 * Set the <code>F020</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF020(Field<? extends Number> field) {
		setNumber(F020, field);
	}

	/**
	 * Set the <code>F021</code> parameter to the function
	 */
	public void setF021(Number value) {
		setNumber(F021, value);
	}

	/**
	 * Set the <code>F021</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF021(Field<? extends Number> field) {
		setNumber(F021, field);
	}

	/**
	 * Set the <code>F022</code> parameter to the function
	 */
	public void setF022(Number value) {
		setNumber(F022, value);
	}

	/**
	 * Set the <code>F022</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF022(Field<? extends Number> field) {
		setNumber(F022, field);
	}

	/**
	 * Set the <code>F023</code> parameter to the function
	 */
	public void setF023(Number value) {
		setNumber(F023, value);
	}

	/**
	 * Set the <code>F023</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF023(Field<? extends Number> field) {
		setNumber(F023, field);
	}

	/**
	 * Set the <code>F024</code> parameter to the function
	 */
	public void setF024(Number value) {
		setNumber(F024, value);
	}

	/**
	 * Set the <code>F024</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF024(Field<? extends Number> field) {
		setNumber(F024, field);
	}

	/**
	 * Set the <code>F025</code> parameter to the function
	 */
	public void setF025(Number value) {
		setNumber(F025, value);
	}

	/**
	 * Set the <code>F025</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF025(Field<? extends Number> field) {
		setNumber(F025, field);
	}

	/**
	 * Set the <code>F026</code> parameter to the function
	 */
	public void setF026(Number value) {
		setNumber(F026, value);
	}

	/**
	 * Set the <code>F026</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF026(Field<? extends Number> field) {
		setNumber(F026, field);
	}

	/**
	 * Set the <code>F027</code> parameter to the function
	 */
	public void setF027(Number value) {
		setNumber(F027, value);
	}

	/**
	 * Set the <code>F027</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF027(Field<? extends Number> field) {
		setNumber(F027, field);
	}

	/**
	 * Set the <code>F028</code> parameter to the function
	 */
	public void setF028(Number value) {
		setNumber(F028, value);
	}

	/**
	 * Set the <code>F028</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF028(Field<? extends Number> field) {
		setNumber(F028, field);
	}

	/**
	 * Set the <code>F029</code> parameter to the function
	 */
	public void setF029(Number value) {
		setNumber(F029, value);
	}

	/**
	 * Set the <code>F029</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF029(Field<? extends Number> field) {
		setNumber(F029, field);
	}

	/**
	 * Set the <code>F030</code> parameter to the function
	 */
	public void setF030(Number value) {
		setNumber(F030, value);
	}

	/**
	 * Set the <code>F030</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF030(Field<? extends Number> field) {
		setNumber(F030, field);
	}

	/**
	 * Set the <code>F031</code> parameter to the function
	 */
	public void setF031(Number value) {
		setNumber(F031, value);
	}

	/**
	 * Set the <code>F031</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF031(Field<? extends Number> field) {
		setNumber(F031, field);
	}

	/**
	 * Set the <code>F032</code> parameter to the function
	 */
	public void setF032(Number value) {
		setNumber(F032, value);
	}

	/**
	 * Set the <code>F032</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF032(Field<? extends Number> field) {
		setNumber(F032, field);
	}

	/**
	 * Set the <code>F033</code> parameter to the function
	 */
	public void setF033(Number value) {
		setNumber(F033, value);
	}

	/**
	 * Set the <code>F033</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF033(Field<? extends Number> field) {
		setNumber(F033, field);
	}

	/**
	 * Set the <code>F034</code> parameter to the function
	 */
	public void setF034(Number value) {
		setNumber(F034, value);
	}

	/**
	 * Set the <code>F034</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF034(Field<? extends Number> field) {
		setNumber(F034, field);
	}

	/**
	 * Set the <code>F035</code> parameter to the function
	 */
	public void setF035(Number value) {
		setNumber(F035, value);
	}

	/**
	 * Set the <code>F035</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF035(Field<? extends Number> field) {
		setNumber(F035, field);
	}

	/**
	 * Set the <code>F036</code> parameter to the function
	 */
	public void setF036(Number value) {
		setNumber(F036, value);
	}

	/**
	 * Set the <code>F036</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF036(Field<? extends Number> field) {
		setNumber(F036, field);
	}

	/**
	 * Set the <code>F037</code> parameter to the function
	 */
	public void setF037(Number value) {
		setNumber(F037, value);
	}

	/**
	 * Set the <code>F037</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF037(Field<? extends Number> field) {
		setNumber(F037, field);
	}

	/**
	 * Set the <code>F038</code> parameter to the function
	 */
	public void setF038(Number value) {
		setNumber(F038, value);
	}

	/**
	 * Set the <code>F038</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF038(Field<? extends Number> field) {
		setNumber(F038, field);
	}

	/**
	 * Set the <code>F039</code> parameter to the function
	 */
	public void setF039(Number value) {
		setNumber(F039, value);
	}

	/**
	 * Set the <code>F039</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF039(Field<? extends Number> field) {
		setNumber(F039, field);
	}

	/**
	 * Set the <code>F040</code> parameter to the function
	 */
	public void setF040(Number value) {
		setNumber(F040, value);
	}

	/**
	 * Set the <code>F040</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF040(Field<? extends Number> field) {
		setNumber(F040, field);
	}

	/**
	 * Set the <code>F041</code> parameter to the function
	 */
	public void setF041(Number value) {
		setNumber(F041, value);
	}

	/**
	 * Set the <code>F041</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF041(Field<? extends Number> field) {
		setNumber(F041, field);
	}

	/**
	 * Set the <code>F042</code> parameter to the function
	 */
	public void setF042(Number value) {
		setNumber(F042, value);
	}

	/**
	 * Set the <code>F042</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF042(Field<? extends Number> field) {
		setNumber(F042, field);
	}

	/**
	 * Set the <code>F043</code> parameter to the function
	 */
	public void setF043(Number value) {
		setNumber(F043, value);
	}

	/**
	 * Set the <code>F043</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF043(Field<? extends Number> field) {
		setNumber(F043, field);
	}

	/**
	 * Set the <code>F044</code> parameter to the function
	 */
	public void setF044(Number value) {
		setNumber(F044, value);
	}

	/**
	 * Set the <code>F044</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF044(Field<? extends Number> field) {
		setNumber(F044, field);
	}

	/**
	 * Set the <code>F045</code> parameter to the function
	 */
	public void setF045(Number value) {
		setNumber(F045, value);
	}

	/**
	 * Set the <code>F045</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF045(Field<? extends Number> field) {
		setNumber(F045, field);
	}

	/**
	 * Set the <code>F046</code> parameter to the function
	 */
	public void setF046(Number value) {
		setNumber(F046, value);
	}

	/**
	 * Set the <code>F046</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF046(Field<? extends Number> field) {
		setNumber(F046, field);
	}

	/**
	 * Set the <code>F047</code> parameter to the function
	 */
	public void setF047(Number value) {
		setNumber(F047, value);
	}

	/**
	 * Set the <code>F047</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF047(Field<? extends Number> field) {
		setNumber(F047, field);
	}

	/**
	 * Set the <code>F048</code> parameter to the function
	 */
	public void setF048(Number value) {
		setNumber(F048, value);
	}

	/**
	 * Set the <code>F048</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF048(Field<? extends Number> field) {
		setNumber(F048, field);
	}

	/**
	 * Set the <code>F049</code> parameter to the function
	 */
	public void setF049(Number value) {
		setNumber(F049, value);
	}

	/**
	 * Set the <code>F049</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF049(Field<? extends Number> field) {
		setNumber(F049, field);
	}

	/**
	 * Set the <code>F050</code> parameter to the function
	 */
	public void setF050(Number value) {
		setNumber(F050, value);
	}

	/**
	 * Set the <code>F050</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF050(Field<? extends Number> field) {
		setNumber(F050, field);
	}

	/**
	 * Set the <code>F051</code> parameter to the function
	 */
	public void setF051(Number value) {
		setNumber(F051, value);
	}

	/**
	 * Set the <code>F051</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF051(Field<? extends Number> field) {
		setNumber(F051, field);
	}

	/**
	 * Set the <code>F052</code> parameter to the function
	 */
	public void setF052(Number value) {
		setNumber(F052, value);
	}

	/**
	 * Set the <code>F052</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF052(Field<? extends Number> field) {
		setNumber(F052, field);
	}

	/**
	 * Set the <code>F053</code> parameter to the function
	 */
	public void setF053(Number value) {
		setNumber(F053, value);
	}

	/**
	 * Set the <code>F053</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF053(Field<? extends Number> field) {
		setNumber(F053, field);
	}

	/**
	 * Set the <code>F054</code> parameter to the function
	 */
	public void setF054(Number value) {
		setNumber(F054, value);
	}

	/**
	 * Set the <code>F054</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF054(Field<? extends Number> field) {
		setNumber(F054, field);
	}

	/**
	 * Set the <code>F055</code> parameter to the function
	 */
	public void setF055(Number value) {
		setNumber(F055, value);
	}

	/**
	 * Set the <code>F055</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF055(Field<? extends Number> field) {
		setNumber(F055, field);
	}

	/**
	 * Set the <code>F056</code> parameter to the function
	 */
	public void setF056(Number value) {
		setNumber(F056, value);
	}

	/**
	 * Set the <code>F056</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF056(Field<? extends Number> field) {
		setNumber(F056, field);
	}

	/**
	 * Set the <code>F057</code> parameter to the function
	 */
	public void setF057(Number value) {
		setNumber(F057, value);
	}

	/**
	 * Set the <code>F057</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF057(Field<? extends Number> field) {
		setNumber(F057, field);
	}

	/**
	 * Set the <code>F058</code> parameter to the function
	 */
	public void setF058(Number value) {
		setNumber(F058, value);
	}

	/**
	 * Set the <code>F058</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF058(Field<? extends Number> field) {
		setNumber(F058, field);
	}

	/**
	 * Set the <code>F059</code> parameter to the function
	 */
	public void setF059(Number value) {
		setNumber(F059, value);
	}

	/**
	 * Set the <code>F059</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF059(Field<? extends Number> field) {
		setNumber(F059, field);
	}

	/**
	 * Set the <code>F060</code> parameter to the function
	 */
	public void setF060(Number value) {
		setNumber(F060, value);
	}

	/**
	 * Set the <code>F060</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF060(Field<? extends Number> field) {
		setNumber(F060, field);
	}

	/**
	 * Set the <code>F061</code> parameter to the function
	 */
	public void setF061(Number value) {
		setNumber(F061, value);
	}

	/**
	 * Set the <code>F061</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF061(Field<? extends Number> field) {
		setNumber(F061, field);
	}

	/**
	 * Set the <code>F062</code> parameter to the function
	 */
	public void setF062(Number value) {
		setNumber(F062, value);
	}

	/**
	 * Set the <code>F062</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF062(Field<? extends Number> field) {
		setNumber(F062, field);
	}

	/**
	 * Set the <code>F063</code> parameter to the function
	 */
	public void setF063(Number value) {
		setNumber(F063, value);
	}

	/**
	 * Set the <code>F063</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF063(Field<? extends Number> field) {
		setNumber(F063, field);
	}

	/**
	 * Set the <code>F064</code> parameter to the function
	 */
	public void setF064(Number value) {
		setNumber(F064, value);
	}

	/**
	 * Set the <code>F064</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF064(Field<? extends Number> field) {
		setNumber(F064, field);
	}

	/**
	 * Set the <code>F065</code> parameter to the function
	 */
	public void setF065(Number value) {
		setNumber(F065, value);
	}

	/**
	 * Set the <code>F065</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF065(Field<? extends Number> field) {
		setNumber(F065, field);
	}

	/**
	 * Set the <code>F066</code> parameter to the function
	 */
	public void setF066(Number value) {
		setNumber(F066, value);
	}

	/**
	 * Set the <code>F066</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF066(Field<? extends Number> field) {
		setNumber(F066, field);
	}

	/**
	 * Set the <code>F067</code> parameter to the function
	 */
	public void setF067(Number value) {
		setNumber(F067, value);
	}

	/**
	 * Set the <code>F067</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF067(Field<? extends Number> field) {
		setNumber(F067, field);
	}

	/**
	 * Set the <code>F068</code> parameter to the function
	 */
	public void setF068(Number value) {
		setNumber(F068, value);
	}

	/**
	 * Set the <code>F068</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF068(Field<? extends Number> field) {
		setNumber(F068, field);
	}

	/**
	 * Set the <code>F069</code> parameter to the function
	 */
	public void setF069(Number value) {
		setNumber(F069, value);
	}

	/**
	 * Set the <code>F069</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF069(Field<? extends Number> field) {
		setNumber(F069, field);
	}

	/**
	 * Set the <code>F070</code> parameter to the function
	 */
	public void setF070(Number value) {
		setNumber(F070, value);
	}

	/**
	 * Set the <code>F070</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF070(Field<? extends Number> field) {
		setNumber(F070, field);
	}

	/**
	 * Set the <code>F071</code> parameter to the function
	 */
	public void setF071(Number value) {
		setNumber(F071, value);
	}

	/**
	 * Set the <code>F071</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF071(Field<? extends Number> field) {
		setNumber(F071, field);
	}

	/**
	 * Set the <code>F072</code> parameter to the function
	 */
	public void setF072(Number value) {
		setNumber(F072, value);
	}

	/**
	 * Set the <code>F072</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF072(Field<? extends Number> field) {
		setNumber(F072, field);
	}

	/**
	 * Set the <code>F073</code> parameter to the function
	 */
	public void setF073(Number value) {
		setNumber(F073, value);
	}

	/**
	 * Set the <code>F073</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF073(Field<? extends Number> field) {
		setNumber(F073, field);
	}

	/**
	 * Set the <code>F074</code> parameter to the function
	 */
	public void setF074(Number value) {
		setNumber(F074, value);
	}

	/**
	 * Set the <code>F074</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF074(Field<? extends Number> field) {
		setNumber(F074, field);
	}

	/**
	 * Set the <code>F075</code> parameter to the function
	 */
	public void setF075(Number value) {
		setNumber(F075, value);
	}

	/**
	 * Set the <code>F075</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF075(Field<? extends Number> field) {
		setNumber(F075, field);
	}

	/**
	 * Set the <code>F076</code> parameter to the function
	 */
	public void setF076(Number value) {
		setNumber(F076, value);
	}

	/**
	 * Set the <code>F076</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF076(Field<? extends Number> field) {
		setNumber(F076, field);
	}

	/**
	 * Set the <code>F077</code> parameter to the function
	 */
	public void setF077(Number value) {
		setNumber(F077, value);
	}

	/**
	 * Set the <code>F077</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF077(Field<? extends Number> field) {
		setNumber(F077, field);
	}

	/**
	 * Set the <code>F078</code> parameter to the function
	 */
	public void setF078(Number value) {
		setNumber(F078, value);
	}

	/**
	 * Set the <code>F078</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF078(Field<? extends Number> field) {
		setNumber(F078, field);
	}

	/**
	 * Set the <code>F079</code> parameter to the function
	 */
	public void setF079(Number value) {
		setNumber(F079, value);
	}

	/**
	 * Set the <code>F079</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF079(Field<? extends Number> field) {
		setNumber(F079, field);
	}

	/**
	 * Set the <code>F080</code> parameter to the function
	 */
	public void setF080(Number value) {
		setNumber(F080, value);
	}

	/**
	 * Set the <code>F080</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF080(Field<? extends Number> field) {
		setNumber(F080, field);
	}

	/**
	 * Set the <code>F081</code> parameter to the function
	 */
	public void setF081(Number value) {
		setNumber(F081, value);
	}

	/**
	 * Set the <code>F081</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF081(Field<? extends Number> field) {
		setNumber(F081, field);
	}

	/**
	 * Set the <code>F082</code> parameter to the function
	 */
	public void setF082(Number value) {
		setNumber(F082, value);
	}

	/**
	 * Set the <code>F082</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF082(Field<? extends Number> field) {
		setNumber(F082, field);
	}

	/**
	 * Set the <code>F083</code> parameter to the function
	 */
	public void setF083(Number value) {
		setNumber(F083, value);
	}

	/**
	 * Set the <code>F083</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF083(Field<? extends Number> field) {
		setNumber(F083, field);
	}

	/**
	 * Set the <code>F084</code> parameter to the function
	 */
	public void setF084(Number value) {
		setNumber(F084, value);
	}

	/**
	 * Set the <code>F084</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF084(Field<? extends Number> field) {
		setNumber(F084, field);
	}

	/**
	 * Set the <code>F085</code> parameter to the function
	 */
	public void setF085(Number value) {
		setNumber(F085, value);
	}

	/**
	 * Set the <code>F085</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF085(Field<? extends Number> field) {
		setNumber(F085, field);
	}

	/**
	 * Set the <code>F086</code> parameter to the function
	 */
	public void setF086(Number value) {
		setNumber(F086, value);
	}

	/**
	 * Set the <code>F086</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF086(Field<? extends Number> field) {
		setNumber(F086, field);
	}

	/**
	 * Set the <code>F087</code> parameter to the function
	 */
	public void setF087(Number value) {
		setNumber(F087, value);
	}

	/**
	 * Set the <code>F087</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF087(Field<? extends Number> field) {
		setNumber(F087, field);
	}

	/**
	 * Set the <code>F088</code> parameter to the function
	 */
	public void setF088(Number value) {
		setNumber(F088, value);
	}

	/**
	 * Set the <code>F088</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF088(Field<? extends Number> field) {
		setNumber(F088, field);
	}

	/**
	 * Set the <code>F089</code> parameter to the function
	 */
	public void setF089(Number value) {
		setNumber(F089, value);
	}

	/**
	 * Set the <code>F089</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF089(Field<? extends Number> field) {
		setNumber(F089, field);
	}

	/**
	 * Set the <code>F090</code> parameter to the function
	 */
	public void setF090(Number value) {
		setNumber(F090, value);
	}

	/**
	 * Set the <code>F090</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF090(Field<? extends Number> field) {
		setNumber(F090, field);
	}

	/**
	 * Set the <code>F091</code> parameter to the function
	 */
	public void setF091(Number value) {
		setNumber(F091, value);
	}

	/**
	 * Set the <code>F091</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF091(Field<? extends Number> field) {
		setNumber(F091, field);
	}

	/**
	 * Set the <code>F092</code> parameter to the function
	 */
	public void setF092(Number value) {
		setNumber(F092, value);
	}

	/**
	 * Set the <code>F092</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF092(Field<? extends Number> field) {
		setNumber(F092, field);
	}

	/**
	 * Set the <code>F093</code> parameter to the function
	 */
	public void setF093(Number value) {
		setNumber(F093, value);
	}

	/**
	 * Set the <code>F093</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF093(Field<? extends Number> field) {
		setNumber(F093, field);
	}

	/**
	 * Set the <code>F094</code> parameter to the function
	 */
	public void setF094(Number value) {
		setNumber(F094, value);
	}

	/**
	 * Set the <code>F094</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF094(Field<? extends Number> field) {
		setNumber(F094, field);
	}

	/**
	 * Set the <code>F095</code> parameter to the function
	 */
	public void setF095(Number value) {
		setNumber(F095, value);
	}

	/**
	 * Set the <code>F095</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF095(Field<? extends Number> field) {
		setNumber(F095, field);
	}

	/**
	 * Set the <code>F096</code> parameter to the function
	 */
	public void setF096(Number value) {
		setNumber(F096, value);
	}

	/**
	 * Set the <code>F096</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF096(Field<? extends Number> field) {
		setNumber(F096, field);
	}

	/**
	 * Set the <code>F097</code> parameter to the function
	 */
	public void setF097(Number value) {
		setNumber(F097, value);
	}

	/**
	 * Set the <code>F097</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF097(Field<? extends Number> field) {
		setNumber(F097, field);
	}

	/**
	 * Set the <code>F098</code> parameter to the function
	 */
	public void setF098(Number value) {
		setNumber(F098, value);
	}

	/**
	 * Set the <code>F098</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF098(Field<? extends Number> field) {
		setNumber(F098, field);
	}

	/**
	 * Set the <code>F099</code> parameter to the function
	 */
	public void setF099(Number value) {
		setNumber(F099, value);
	}

	/**
	 * Set the <code>F099</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF099(Field<? extends Number> field) {
		setNumber(F099, field);
	}

	/**
	 * Set the <code>F100</code> parameter to the function
	 */
	public void setF100(Number value) {
		setNumber(F100, value);
	}

	/**
	 * Set the <code>F100</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF100(Field<? extends Number> field) {
		setNumber(F100, field);
	}

	/**
	 * Set the <code>F101</code> parameter to the function
	 */
	public void setF101(Number value) {
		setNumber(F101, value);
	}

	/**
	 * Set the <code>F101</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF101(Field<? extends Number> field) {
		setNumber(F101, field);
	}

	/**
	 * Set the <code>F102</code> parameter to the function
	 */
	public void setF102(Number value) {
		setNumber(F102, value);
	}

	/**
	 * Set the <code>F102</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF102(Field<? extends Number> field) {
		setNumber(F102, field);
	}

	/**
	 * Set the <code>F103</code> parameter to the function
	 */
	public void setF103(Number value) {
		setNumber(F103, value);
	}

	/**
	 * Set the <code>F103</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF103(Field<? extends Number> field) {
		setNumber(F103, field);
	}

	/**
	 * Set the <code>F104</code> parameter to the function
	 */
	public void setF104(Number value) {
		setNumber(F104, value);
	}

	/**
	 * Set the <code>F104</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF104(Field<? extends Number> field) {
		setNumber(F104, field);
	}

	/**
	 * Set the <code>F105</code> parameter to the function
	 */
	public void setF105(Number value) {
		setNumber(F105, value);
	}

	/**
	 * Set the <code>F105</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF105(Field<? extends Number> field) {
		setNumber(F105, field);
	}

	/**
	 * Set the <code>F106</code> parameter to the function
	 */
	public void setF106(Number value) {
		setNumber(F106, value);
	}

	/**
	 * Set the <code>F106</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF106(Field<? extends Number> field) {
		setNumber(F106, field);
	}

	/**
	 * Set the <code>F107</code> parameter to the function
	 */
	public void setF107(Number value) {
		setNumber(F107, value);
	}

	/**
	 * Set the <code>F107</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF107(Field<? extends Number> field) {
		setNumber(F107, field);
	}

	/**
	 * Set the <code>F108</code> parameter to the function
	 */
	public void setF108(Number value) {
		setNumber(F108, value);
	}

	/**
	 * Set the <code>F108</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF108(Field<? extends Number> field) {
		setNumber(F108, field);
	}

	/**
	 * Set the <code>F109</code> parameter to the function
	 */
	public void setF109(Number value) {
		setNumber(F109, value);
	}

	/**
	 * Set the <code>F109</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF109(Field<? extends Number> field) {
		setNumber(F109, field);
	}

	/**
	 * Set the <code>F110</code> parameter to the function
	 */
	public void setF110(Number value) {
		setNumber(F110, value);
	}

	/**
	 * Set the <code>F110</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF110(Field<? extends Number> field) {
		setNumber(F110, field);
	}

	/**
	 * Set the <code>F111</code> parameter to the function
	 */
	public void setF111(Number value) {
		setNumber(F111, value);
	}

	/**
	 * Set the <code>F111</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF111(Field<? extends Number> field) {
		setNumber(F111, field);
	}

	/**
	 * Set the <code>F112</code> parameter to the function
	 */
	public void setF112(Number value) {
		setNumber(F112, value);
	}

	/**
	 * Set the <code>F112</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF112(Field<? extends Number> field) {
		setNumber(F112, field);
	}

	/**
	 * Set the <code>F113</code> parameter to the function
	 */
	public void setF113(Number value) {
		setNumber(F113, value);
	}

	/**
	 * Set the <code>F113</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF113(Field<? extends Number> field) {
		setNumber(F113, field);
	}

	/**
	 * Set the <code>F114</code> parameter to the function
	 */
	public void setF114(Number value) {
		setNumber(F114, value);
	}

	/**
	 * Set the <code>F114</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF114(Field<? extends Number> field) {
		setNumber(F114, field);
	}

	/**
	 * Set the <code>F115</code> parameter to the function
	 */
	public void setF115(Number value) {
		setNumber(F115, value);
	}

	/**
	 * Set the <code>F115</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF115(Field<? extends Number> field) {
		setNumber(F115, field);
	}

	/**
	 * Set the <code>F116</code> parameter to the function
	 */
	public void setF116(Number value) {
		setNumber(F116, value);
	}

	/**
	 * Set the <code>F116</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF116(Field<? extends Number> field) {
		setNumber(F116, field);
	}

	/**
	 * Set the <code>F117</code> parameter to the function
	 */
	public void setF117(Number value) {
		setNumber(F117, value);
	}

	/**
	 * Set the <code>F117</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF117(Field<? extends Number> field) {
		setNumber(F117, field);
	}

	/**
	 * Set the <code>F118</code> parameter to the function
	 */
	public void setF118(Number value) {
		setNumber(F118, value);
	}

	/**
	 * Set the <code>F118</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF118(Field<? extends Number> field) {
		setNumber(F118, field);
	}

	/**
	 * Set the <code>F119</code> parameter to the function
	 */
	public void setF119(Number value) {
		setNumber(F119, value);
	}

	/**
	 * Set the <code>F119</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF119(Field<? extends Number> field) {
		setNumber(F119, field);
	}

	/**
	 * Set the <code>F120</code> parameter to the function
	 */
	public void setF120(Number value) {
		setNumber(F120, value);
	}

	/**
	 * Set the <code>F120</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF120(Field<? extends Number> field) {
		setNumber(F120, field);
	}

	/**
	 * Set the <code>F121</code> parameter to the function
	 */
	public void setF121(Number value) {
		setNumber(F121, value);
	}

	/**
	 * Set the <code>F121</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF121(Field<? extends Number> field) {
		setNumber(F121, field);
	}

	/**
	 * Set the <code>F122</code> parameter to the function
	 */
	public void setF122(Number value) {
		setNumber(F122, value);
	}

	/**
	 * Set the <code>F122</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF122(Field<? extends Number> field) {
		setNumber(F122, field);
	}

	/**
	 * Set the <code>F123</code> parameter to the function
	 */
	public void setF123(Number value) {
		setNumber(F123, value);
	}

	/**
	 * Set the <code>F123</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF123(Field<? extends Number> field) {
		setNumber(F123, field);
	}

	/**
	 * Set the <code>F124</code> parameter to the function
	 */
	public void setF124(Number value) {
		setNumber(F124, value);
	}

	/**
	 * Set the <code>F124</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF124(Field<? extends Number> field) {
		setNumber(F124, field);
	}

	/**
	 * Set the <code>F125</code> parameter to the function
	 */
	public void setF125(Number value) {
		setNumber(F125, value);
	}

	/**
	 * Set the <code>F125</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF125(Field<? extends Number> field) {
		setNumber(F125, field);
	}

	/**
	 * Set the <code>F126</code> parameter to the function
	 */
	public void setF126(Number value) {
		setNumber(F126, value);
	}

	/**
	 * Set the <code>F126</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF126(Field<? extends Number> field) {
		setNumber(F126, field);
	}

	/**
	 * Set the <code>F127</code> parameter to the function
	 */
	public void setF127(Number value) {
		setNumber(F127, value);
	}

	/**
	 * Set the <code>F127</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF127(Field<? extends Number> field) {
		setNumber(F127, field);
	}

	/**
	 * Set the <code>F128</code> parameter to the function
	 */
	public void setF128(Number value) {
		setNumber(F128, value);
	}

	/**
	 * Set the <code>F128</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF128(Field<? extends Number> field) {
		setNumber(F128, field);
	}

	/**
	 * Set the <code>F129</code> parameter to the function
	 */
	public void setF129(Number value) {
		setNumber(F129, value);
	}

	/**
	 * Set the <code>F129</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF129(Field<? extends Number> field) {
		setNumber(F129, field);
	}

	/**
	 * Set the <code>F130</code> parameter to the function
	 */
	public void setF130(Number value) {
		setNumber(F130, value);
	}

	/**
	 * Set the <code>F130</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF130(Field<? extends Number> field) {
		setNumber(F130, field);
	}

	/**
	 * Set the <code>F131</code> parameter to the function
	 */
	public void setF131(Number value) {
		setNumber(F131, value);
	}

	/**
	 * Set the <code>F131</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF131(Field<? extends Number> field) {
		setNumber(F131, field);
	}

	/**
	 * Set the <code>F132</code> parameter to the function
	 */
	public void setF132(Number value) {
		setNumber(F132, value);
	}

	/**
	 * Set the <code>F132</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF132(Field<? extends Number> field) {
		setNumber(F132, field);
	}

	/**
	 * Set the <code>F133</code> parameter to the function
	 */
	public void setF133(Number value) {
		setNumber(F133, value);
	}

	/**
	 * Set the <code>F133</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF133(Field<? extends Number> field) {
		setNumber(F133, field);
	}

	/**
	 * Set the <code>F134</code> parameter to the function
	 */
	public void setF134(Number value) {
		setNumber(F134, value);
	}

	/**
	 * Set the <code>F134</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF134(Field<? extends Number> field) {
		setNumber(F134, field);
	}

	/**
	 * Set the <code>F135</code> parameter to the function
	 */
	public void setF135(Number value) {
		setNumber(F135, value);
	}

	/**
	 * Set the <code>F135</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF135(Field<? extends Number> field) {
		setNumber(F135, field);
	}

	/**
	 * Set the <code>F136</code> parameter to the function
	 */
	public void setF136(Number value) {
		setNumber(F136, value);
	}

	/**
	 * Set the <code>F136</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF136(Field<? extends Number> field) {
		setNumber(F136, field);
	}

	/**
	 * Set the <code>F137</code> parameter to the function
	 */
	public void setF137(Number value) {
		setNumber(F137, value);
	}

	/**
	 * Set the <code>F137</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF137(Field<? extends Number> field) {
		setNumber(F137, field);
	}

	/**
	 * Set the <code>F138</code> parameter to the function
	 */
	public void setF138(Number value) {
		setNumber(F138, value);
	}

	/**
	 * Set the <code>F138</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF138(Field<? extends Number> field) {
		setNumber(F138, field);
	}

	/**
	 * Set the <code>F139</code> parameter to the function
	 */
	public void setF139(Number value) {
		setNumber(F139, value);
	}

	/**
	 * Set the <code>F139</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF139(Field<? extends Number> field) {
		setNumber(F139, field);
	}

	/**
	 * Set the <code>F140</code> parameter to the function
	 */
	public void setF140(Number value) {
		setNumber(F140, value);
	}

	/**
	 * Set the <code>F140</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF140(Field<? extends Number> field) {
		setNumber(F140, field);
	}

	/**
	 * Set the <code>F141</code> parameter to the function
	 */
	public void setF141(Number value) {
		setNumber(F141, value);
	}

	/**
	 * Set the <code>F141</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF141(Field<? extends Number> field) {
		setNumber(F141, field);
	}

	/**
	 * Set the <code>F142</code> parameter to the function
	 */
	public void setF142(Number value) {
		setNumber(F142, value);
	}

	/**
	 * Set the <code>F142</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF142(Field<? extends Number> field) {
		setNumber(F142, field);
	}

	/**
	 * Set the <code>F143</code> parameter to the function
	 */
	public void setF143(Number value) {
		setNumber(F143, value);
	}

	/**
	 * Set the <code>F143</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF143(Field<? extends Number> field) {
		setNumber(F143, field);
	}

	/**
	 * Set the <code>F144</code> parameter to the function
	 */
	public void setF144(Number value) {
		setNumber(F144, value);
	}

	/**
	 * Set the <code>F144</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF144(Field<? extends Number> field) {
		setNumber(F144, field);
	}

	/**
	 * Set the <code>F145</code> parameter to the function
	 */
	public void setF145(Number value) {
		setNumber(F145, value);
	}

	/**
	 * Set the <code>F145</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF145(Field<? extends Number> field) {
		setNumber(F145, field);
	}

	/**
	 * Set the <code>F146</code> parameter to the function
	 */
	public void setF146(Number value) {
		setNumber(F146, value);
	}

	/**
	 * Set the <code>F146</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF146(Field<? extends Number> field) {
		setNumber(F146, field);
	}

	/**
	 * Set the <code>F147</code> parameter to the function
	 */
	public void setF147(Number value) {
		setNumber(F147, value);
	}

	/**
	 * Set the <code>F147</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF147(Field<? extends Number> field) {
		setNumber(F147, field);
	}

	/**
	 * Set the <code>F148</code> parameter to the function
	 */
	public void setF148(Number value) {
		setNumber(F148, value);
	}

	/**
	 * Set the <code>F148</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF148(Field<? extends Number> field) {
		setNumber(F148, field);
	}

	/**
	 * Set the <code>F149</code> parameter to the function
	 */
	public void setF149(Number value) {
		setNumber(F149, value);
	}

	/**
	 * Set the <code>F149</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF149(Field<? extends Number> field) {
		setNumber(F149, field);
	}

	/**
	 * Set the <code>F150</code> parameter to the function
	 */
	public void setF150(Number value) {
		setNumber(F150, value);
	}

	/**
	 * Set the <code>F150</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF150(Field<? extends Number> field) {
		setNumber(F150, field);
	}

	/**
	 * Set the <code>F151</code> parameter to the function
	 */
	public void setF151(Number value) {
		setNumber(F151, value);
	}

	/**
	 * Set the <code>F151</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF151(Field<? extends Number> field) {
		setNumber(F151, field);
	}

	/**
	 * Set the <code>F152</code> parameter to the function
	 */
	public void setF152(Number value) {
		setNumber(F152, value);
	}

	/**
	 * Set the <code>F152</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF152(Field<? extends Number> field) {
		setNumber(F152, field);
	}

	/**
	 * Set the <code>F153</code> parameter to the function
	 */
	public void setF153(Number value) {
		setNumber(F153, value);
	}

	/**
	 * Set the <code>F153</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF153(Field<? extends Number> field) {
		setNumber(F153, field);
	}

	/**
	 * Set the <code>F154</code> parameter to the function
	 */
	public void setF154(Number value) {
		setNumber(F154, value);
	}

	/**
	 * Set the <code>F154</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF154(Field<? extends Number> field) {
		setNumber(F154, field);
	}

	/**
	 * Set the <code>F155</code> parameter to the function
	 */
	public void setF155(Number value) {
		setNumber(F155, value);
	}

	/**
	 * Set the <code>F155</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF155(Field<? extends Number> field) {
		setNumber(F155, field);
	}

	/**
	 * Set the <code>F156</code> parameter to the function
	 */
	public void setF156(Number value) {
		setNumber(F156, value);
	}

	/**
	 * Set the <code>F156</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF156(Field<? extends Number> field) {
		setNumber(F156, field);
	}

	/**
	 * Set the <code>F157</code> parameter to the function
	 */
	public void setF157(Number value) {
		setNumber(F157, value);
	}

	/**
	 * Set the <code>F157</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF157(Field<? extends Number> field) {
		setNumber(F157, field);
	}

	/**
	 * Set the <code>F158</code> parameter to the function
	 */
	public void setF158(Number value) {
		setNumber(F158, value);
	}

	/**
	 * Set the <code>F158</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF158(Field<? extends Number> field) {
		setNumber(F158, field);
	}

	/**
	 * Set the <code>F159</code> parameter to the function
	 */
	public void setF159(Number value) {
		setNumber(F159, value);
	}

	/**
	 * Set the <code>F159</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF159(Field<? extends Number> field) {
		setNumber(F159, field);
	}

	/**
	 * Set the <code>F160</code> parameter to the function
	 */
	public void setF160(Number value) {
		setNumber(F160, value);
	}

	/**
	 * Set the <code>F160</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF160(Field<? extends Number> field) {
		setNumber(F160, field);
	}

	/**
	 * Set the <code>F161</code> parameter to the function
	 */
	public void setF161(Number value) {
		setNumber(F161, value);
	}

	/**
	 * Set the <code>F161</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF161(Field<? extends Number> field) {
		setNumber(F161, field);
	}

	/**
	 * Set the <code>F162</code> parameter to the function
	 */
	public void setF162(Number value) {
		setNumber(F162, value);
	}

	/**
	 * Set the <code>F162</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF162(Field<? extends Number> field) {
		setNumber(F162, field);
	}

	/**
	 * Set the <code>F163</code> parameter to the function
	 */
	public void setF163(Number value) {
		setNumber(F163, value);
	}

	/**
	 * Set the <code>F163</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF163(Field<? extends Number> field) {
		setNumber(F163, field);
	}

	/**
	 * Set the <code>F164</code> parameter to the function
	 */
	public void setF164(Number value) {
		setNumber(F164, value);
	}

	/**
	 * Set the <code>F164</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF164(Field<? extends Number> field) {
		setNumber(F164, field);
	}

	/**
	 * Set the <code>F165</code> parameter to the function
	 */
	public void setF165(Number value) {
		setNumber(F165, value);
	}

	/**
	 * Set the <code>F165</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF165(Field<? extends Number> field) {
		setNumber(F165, field);
	}

	/**
	 * Set the <code>F166</code> parameter to the function
	 */
	public void setF166(Number value) {
		setNumber(F166, value);
	}

	/**
	 * Set the <code>F166</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF166(Field<? extends Number> field) {
		setNumber(F166, field);
	}

	/**
	 * Set the <code>F167</code> parameter to the function
	 */
	public void setF167(Number value) {
		setNumber(F167, value);
	}

	/**
	 * Set the <code>F167</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF167(Field<? extends Number> field) {
		setNumber(F167, field);
	}

	/**
	 * Set the <code>F168</code> parameter to the function
	 */
	public void setF168(Number value) {
		setNumber(F168, value);
	}

	/**
	 * Set the <code>F168</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF168(Field<? extends Number> field) {
		setNumber(F168, field);
	}

	/**
	 * Set the <code>F169</code> parameter to the function
	 */
	public void setF169(Number value) {
		setNumber(F169, value);
	}

	/**
	 * Set the <code>F169</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF169(Field<? extends Number> field) {
		setNumber(F169, field);
	}

	/**
	 * Set the <code>F170</code> parameter to the function
	 */
	public void setF170(Number value) {
		setNumber(F170, value);
	}

	/**
	 * Set the <code>F170</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF170(Field<? extends Number> field) {
		setNumber(F170, field);
	}

	/**
	 * Set the <code>F171</code> parameter to the function
	 */
	public void setF171(Number value) {
		setNumber(F171, value);
	}

	/**
	 * Set the <code>F171</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF171(Field<? extends Number> field) {
		setNumber(F171, field);
	}

	/**
	 * Set the <code>F172</code> parameter to the function
	 */
	public void setF172(Number value) {
		setNumber(F172, value);
	}

	/**
	 * Set the <code>F172</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF172(Field<? extends Number> field) {
		setNumber(F172, field);
	}

	/**
	 * Set the <code>F173</code> parameter to the function
	 */
	public void setF173(Number value) {
		setNumber(F173, value);
	}

	/**
	 * Set the <code>F173</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF173(Field<? extends Number> field) {
		setNumber(F173, field);
	}

	/**
	 * Set the <code>F174</code> parameter to the function
	 */
	public void setF174(Number value) {
		setNumber(F174, value);
	}

	/**
	 * Set the <code>F174</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF174(Field<? extends Number> field) {
		setNumber(F174, field);
	}

	/**
	 * Set the <code>F175</code> parameter to the function
	 */
	public void setF175(Number value) {
		setNumber(F175, value);
	}

	/**
	 * Set the <code>F175</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF175(Field<? extends Number> field) {
		setNumber(F175, field);
	}

	/**
	 * Set the <code>F176</code> parameter to the function
	 */
	public void setF176(Number value) {
		setNumber(F176, value);
	}

	/**
	 * Set the <code>F176</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF176(Field<? extends Number> field) {
		setNumber(F176, field);
	}

	/**
	 * Set the <code>F177</code> parameter to the function
	 */
	public void setF177(Number value) {
		setNumber(F177, value);
	}

	/**
	 * Set the <code>F177</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF177(Field<? extends Number> field) {
		setNumber(F177, field);
	}

	/**
	 * Set the <code>F178</code> parameter to the function
	 */
	public void setF178(Number value) {
		setNumber(F178, value);
	}

	/**
	 * Set the <code>F178</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF178(Field<? extends Number> field) {
		setNumber(F178, field);
	}

	/**
	 * Set the <code>F179</code> parameter to the function
	 */
	public void setF179(Number value) {
		setNumber(F179, value);
	}

	/**
	 * Set the <code>F179</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF179(Field<? extends Number> field) {
		setNumber(F179, field);
	}

	/**
	 * Set the <code>F180</code> parameter to the function
	 */
	public void setF180(Number value) {
		setNumber(F180, value);
	}

	/**
	 * Set the <code>F180</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF180(Field<? extends Number> field) {
		setNumber(F180, field);
	}

	/**
	 * Set the <code>F181</code> parameter to the function
	 */
	public void setF181(Number value) {
		setNumber(F181, value);
	}

	/**
	 * Set the <code>F181</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF181(Field<? extends Number> field) {
		setNumber(F181, field);
	}

	/**
	 * Set the <code>F182</code> parameter to the function
	 */
	public void setF182(Number value) {
		setNumber(F182, value);
	}

	/**
	 * Set the <code>F182</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF182(Field<? extends Number> field) {
		setNumber(F182, field);
	}

	/**
	 * Set the <code>F183</code> parameter to the function
	 */
	public void setF183(Number value) {
		setNumber(F183, value);
	}

	/**
	 * Set the <code>F183</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF183(Field<? extends Number> field) {
		setNumber(F183, field);
	}

	/**
	 * Set the <code>F184</code> parameter to the function
	 */
	public void setF184(Number value) {
		setNumber(F184, value);
	}

	/**
	 * Set the <code>F184</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF184(Field<? extends Number> field) {
		setNumber(F184, field);
	}

	/**
	 * Set the <code>F185</code> parameter to the function
	 */
	public void setF185(Number value) {
		setNumber(F185, value);
	}

	/**
	 * Set the <code>F185</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF185(Field<? extends Number> field) {
		setNumber(F185, field);
	}

	/**
	 * Set the <code>F186</code> parameter to the function
	 */
	public void setF186(Number value) {
		setNumber(F186, value);
	}

	/**
	 * Set the <code>F186</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF186(Field<? extends Number> field) {
		setNumber(F186, field);
	}

	/**
	 * Set the <code>F187</code> parameter to the function
	 */
	public void setF187(Number value) {
		setNumber(F187, value);
	}

	/**
	 * Set the <code>F187</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF187(Field<? extends Number> field) {
		setNumber(F187, field);
	}

	/**
	 * Set the <code>F188</code> parameter to the function
	 */
	public void setF188(Number value) {
		setNumber(F188, value);
	}

	/**
	 * Set the <code>F188</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF188(Field<? extends Number> field) {
		setNumber(F188, field);
	}

	/**
	 * Set the <code>F189</code> parameter to the function
	 */
	public void setF189(Number value) {
		setNumber(F189, value);
	}

	/**
	 * Set the <code>F189</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF189(Field<? extends Number> field) {
		setNumber(F189, field);
	}

	/**
	 * Set the <code>F190</code> parameter to the function
	 */
	public void setF190(Number value) {
		setNumber(F190, value);
	}

	/**
	 * Set the <code>F190</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF190(Field<? extends Number> field) {
		setNumber(F190, field);
	}

	/**
	 * Set the <code>F191</code> parameter to the function
	 */
	public void setF191(Number value) {
		setNumber(F191, value);
	}

	/**
	 * Set the <code>F191</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF191(Field<? extends Number> field) {
		setNumber(F191, field);
	}

	/**
	 * Set the <code>F192</code> parameter to the function
	 */
	public void setF192(Number value) {
		setNumber(F192, value);
	}

	/**
	 * Set the <code>F192</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF192(Field<? extends Number> field) {
		setNumber(F192, field);
	}

	/**
	 * Set the <code>F193</code> parameter to the function
	 */
	public void setF193(Number value) {
		setNumber(F193, value);
	}

	/**
	 * Set the <code>F193</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF193(Field<? extends Number> field) {
		setNumber(F193, field);
	}

	/**
	 * Set the <code>F194</code> parameter to the function
	 */
	public void setF194(Number value) {
		setNumber(F194, value);
	}

	/**
	 * Set the <code>F194</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF194(Field<? extends Number> field) {
		setNumber(F194, field);
	}

	/**
	 * Set the <code>F195</code> parameter to the function
	 */
	public void setF195(Number value) {
		setNumber(F195, value);
	}

	/**
	 * Set the <code>F195</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF195(Field<? extends Number> field) {
		setNumber(F195, field);
	}

	/**
	 * Set the <code>F196</code> parameter to the function
	 */
	public void setF196(Number value) {
		setNumber(F196, value);
	}

	/**
	 * Set the <code>F196</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF196(Field<? extends Number> field) {
		setNumber(F196, field);
	}

	/**
	 * Set the <code>F197</code> parameter to the function
	 */
	public void setF197(Number value) {
		setNumber(F197, value);
	}

	/**
	 * Set the <code>F197</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF197(Field<? extends Number> field) {
		setNumber(F197, field);
	}

	/**
	 * Set the <code>F198</code> parameter to the function
	 */
	public void setF198(Number value) {
		setNumber(F198, value);
	}

	/**
	 * Set the <code>F198</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF198(Field<? extends Number> field) {
		setNumber(F198, field);
	}

	/**
	 * Set the <code>F199</code> parameter to the function
	 */
	public void setF199(Number value) {
		setNumber(F199, value);
	}

	/**
	 * Set the <code>F199</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF199(Field<? extends Number> field) {
		setNumber(F199, field);
	}

	/**
	 * Set the <code>F200</code> parameter to the function
	 */
	public void setF200(Number value) {
		setNumber(F200, value);
	}

	/**
	 * Set the <code>F200</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF200(Field<? extends Number> field) {
		setNumber(F200, field);
	}

	/**
	 * Set the <code>F201</code> parameter to the function
	 */
	public void setF201(Number value) {
		setNumber(F201, value);
	}

	/**
	 * Set the <code>F201</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF201(Field<? extends Number> field) {
		setNumber(F201, field);
	}

	/**
	 * Set the <code>F202</code> parameter to the function
	 */
	public void setF202(Number value) {
		setNumber(F202, value);
	}

	/**
	 * Set the <code>F202</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF202(Field<? extends Number> field) {
		setNumber(F202, field);
	}

	/**
	 * Set the <code>F203</code> parameter to the function
	 */
	public void setF203(Number value) {
		setNumber(F203, value);
	}

	/**
	 * Set the <code>F203</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF203(Field<? extends Number> field) {
		setNumber(F203, field);
	}

	/**
	 * Set the <code>F204</code> parameter to the function
	 */
	public void setF204(Number value) {
		setNumber(F204, value);
	}

	/**
	 * Set the <code>F204</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF204(Field<? extends Number> field) {
		setNumber(F204, field);
	}

	/**
	 * Set the <code>F205</code> parameter to the function
	 */
	public void setF205(Number value) {
		setNumber(F205, value);
	}

	/**
	 * Set the <code>F205</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF205(Field<? extends Number> field) {
		setNumber(F205, field);
	}

	/**
	 * Set the <code>F206</code> parameter to the function
	 */
	public void setF206(Number value) {
		setNumber(F206, value);
	}

	/**
	 * Set the <code>F206</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF206(Field<? extends Number> field) {
		setNumber(F206, field);
	}

	/**
	 * Set the <code>F207</code> parameter to the function
	 */
	public void setF207(Number value) {
		setNumber(F207, value);
	}

	/**
	 * Set the <code>F207</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF207(Field<? extends Number> field) {
		setNumber(F207, field);
	}

	/**
	 * Set the <code>F208</code> parameter to the function
	 */
	public void setF208(Number value) {
		setNumber(F208, value);
	}

	/**
	 * Set the <code>F208</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF208(Field<? extends Number> field) {
		setNumber(F208, field);
	}

	/**
	 * Set the <code>F209</code> parameter to the function
	 */
	public void setF209(Number value) {
		setNumber(F209, value);
	}

	/**
	 * Set the <code>F209</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF209(Field<? extends Number> field) {
		setNumber(F209, field);
	}

	/**
	 * Set the <code>F210</code> parameter to the function
	 */
	public void setF210(Number value) {
		setNumber(F210, value);
	}

	/**
	 * Set the <code>F210</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF210(Field<? extends Number> field) {
		setNumber(F210, field);
	}

	/**
	 * Set the <code>F211</code> parameter to the function
	 */
	public void setF211(Number value) {
		setNumber(F211, value);
	}

	/**
	 * Set the <code>F211</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF211(Field<? extends Number> field) {
		setNumber(F211, field);
	}

	/**
	 * Set the <code>F212</code> parameter to the function
	 */
	public void setF212(Number value) {
		setNumber(F212, value);
	}

	/**
	 * Set the <code>F212</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF212(Field<? extends Number> field) {
		setNumber(F212, field);
	}

	/**
	 * Set the <code>F213</code> parameter to the function
	 */
	public void setF213(Number value) {
		setNumber(F213, value);
	}

	/**
	 * Set the <code>F213</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF213(Field<? extends Number> field) {
		setNumber(F213, field);
	}

	/**
	 * Set the <code>F214</code> parameter to the function
	 */
	public void setF214(Number value) {
		setNumber(F214, value);
	}

	/**
	 * Set the <code>F214</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF214(Field<? extends Number> field) {
		setNumber(F214, field);
	}

	/**
	 * Set the <code>F215</code> parameter to the function
	 */
	public void setF215(Number value) {
		setNumber(F215, value);
	}

	/**
	 * Set the <code>F215</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF215(Field<? extends Number> field) {
		setNumber(F215, field);
	}

	/**
	 * Set the <code>F216</code> parameter to the function
	 */
	public void setF216(Number value) {
		setNumber(F216, value);
	}

	/**
	 * Set the <code>F216</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF216(Field<? extends Number> field) {
		setNumber(F216, field);
	}

	/**
	 * Set the <code>F217</code> parameter to the function
	 */
	public void setF217(Number value) {
		setNumber(F217, value);
	}

	/**
	 * Set the <code>F217</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF217(Field<? extends Number> field) {
		setNumber(F217, field);
	}

	/**
	 * Set the <code>F218</code> parameter to the function
	 */
	public void setF218(Number value) {
		setNumber(F218, value);
	}

	/**
	 * Set the <code>F218</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF218(Field<? extends Number> field) {
		setNumber(F218, field);
	}

	/**
	 * Set the <code>F219</code> parameter to the function
	 */
	public void setF219(Number value) {
		setNumber(F219, value);
	}

	/**
	 * Set the <code>F219</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF219(Field<? extends Number> field) {
		setNumber(F219, field);
	}

	/**
	 * Set the <code>F220</code> parameter to the function
	 */
	public void setF220(Number value) {
		setNumber(F220, value);
	}

	/**
	 * Set the <code>F220</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF220(Field<? extends Number> field) {
		setNumber(F220, field);
	}

	/**
	 * Set the <code>F221</code> parameter to the function
	 */
	public void setF221(Number value) {
		setNumber(F221, value);
	}

	/**
	 * Set the <code>F221</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF221(Field<? extends Number> field) {
		setNumber(F221, field);
	}

	/**
	 * Set the <code>F222</code> parameter to the function
	 */
	public void setF222(Number value) {
		setNumber(F222, value);
	}

	/**
	 * Set the <code>F222</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF222(Field<? extends Number> field) {
		setNumber(F222, field);
	}

	/**
	 * Set the <code>F223</code> parameter to the function
	 */
	public void setF223(Number value) {
		setNumber(F223, value);
	}

	/**
	 * Set the <code>F223</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF223(Field<? extends Number> field) {
		setNumber(F223, field);
	}

	/**
	 * Set the <code>F224</code> parameter to the function
	 */
	public void setF224(Number value) {
		setNumber(F224, value);
	}

	/**
	 * Set the <code>F224</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF224(Field<? extends Number> field) {
		setNumber(F224, field);
	}

	/**
	 * Set the <code>F225</code> parameter to the function
	 */
	public void setF225(Number value) {
		setNumber(F225, value);
	}

	/**
	 * Set the <code>F225</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF225(Field<? extends Number> field) {
		setNumber(F225, field);
	}

	/**
	 * Set the <code>F226</code> parameter to the function
	 */
	public void setF226(Number value) {
		setNumber(F226, value);
	}

	/**
	 * Set the <code>F226</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF226(Field<? extends Number> field) {
		setNumber(F226, field);
	}

	/**
	 * Set the <code>F227</code> parameter to the function
	 */
	public void setF227(Number value) {
		setNumber(F227, value);
	}

	/**
	 * Set the <code>F227</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF227(Field<? extends Number> field) {
		setNumber(F227, field);
	}

	/**
	 * Set the <code>F228</code> parameter to the function
	 */
	public void setF228(Number value) {
		setNumber(F228, value);
	}

	/**
	 * Set the <code>F228</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF228(Field<? extends Number> field) {
		setNumber(F228, field);
	}

	/**
	 * Set the <code>F229</code> parameter to the function
	 */
	public void setF229(Number value) {
		setNumber(F229, value);
	}

	/**
	 * Set the <code>F229</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF229(Field<? extends Number> field) {
		setNumber(F229, field);
	}

	/**
	 * Set the <code>F230</code> parameter to the function
	 */
	public void setF230(Number value) {
		setNumber(F230, value);
	}

	/**
	 * Set the <code>F230</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF230(Field<? extends Number> field) {
		setNumber(F230, field);
	}

	/**
	 * Set the <code>F231</code> parameter to the function
	 */
	public void setF231(Number value) {
		setNumber(F231, value);
	}

	/**
	 * Set the <code>F231</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF231(Field<? extends Number> field) {
		setNumber(F231, field);
	}

	/**
	 * Set the <code>F232</code> parameter to the function
	 */
	public void setF232(Number value) {
		setNumber(F232, value);
	}

	/**
	 * Set the <code>F232</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF232(Field<? extends Number> field) {
		setNumber(F232, field);
	}

	/**
	 * Set the <code>F233</code> parameter to the function
	 */
	public void setF233(Number value) {
		setNumber(F233, value);
	}

	/**
	 * Set the <code>F233</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF233(Field<? extends Number> field) {
		setNumber(F233, field);
	}

	/**
	 * Set the <code>F234</code> parameter to the function
	 */
	public void setF234(Number value) {
		setNumber(F234, value);
	}

	/**
	 * Set the <code>F234</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF234(Field<? extends Number> field) {
		setNumber(F234, field);
	}

	/**
	 * Set the <code>F235</code> parameter to the function
	 */
	public void setF235(Number value) {
		setNumber(F235, value);
	}

	/**
	 * Set the <code>F235</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF235(Field<? extends Number> field) {
		setNumber(F235, field);
	}

	/**
	 * Set the <code>F236</code> parameter to the function
	 */
	public void setF236(Number value) {
		setNumber(F236, value);
	}

	/**
	 * Set the <code>F236</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF236(Field<? extends Number> field) {
		setNumber(F236, field);
	}

	/**
	 * Set the <code>F237</code> parameter to the function
	 */
	public void setF237(Number value) {
		setNumber(F237, value);
	}

	/**
	 * Set the <code>F237</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF237(Field<? extends Number> field) {
		setNumber(F237, field);
	}

	/**
	 * Set the <code>F238</code> parameter to the function
	 */
	public void setF238(Number value) {
		setNumber(F238, value);
	}

	/**
	 * Set the <code>F238</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF238(Field<? extends Number> field) {
		setNumber(F238, field);
	}

	/**
	 * Set the <code>F239</code> parameter to the function
	 */
	public void setF239(Number value) {
		setNumber(F239, value);
	}

	/**
	 * Set the <code>F239</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF239(Field<? extends Number> field) {
		setNumber(F239, field);
	}

	/**
	 * Set the <code>F240</code> parameter to the function
	 */
	public void setF240(Number value) {
		setNumber(F240, value);
	}

	/**
	 * Set the <code>F240</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF240(Field<? extends Number> field) {
		setNumber(F240, field);
	}

	/**
	 * Set the <code>F241</code> parameter to the function
	 */
	public void setF241(Number value) {
		setNumber(F241, value);
	}

	/**
	 * Set the <code>F241</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF241(Field<? extends Number> field) {
		setNumber(F241, field);
	}

	/**
	 * Set the <code>F242</code> parameter to the function
	 */
	public void setF242(Number value) {
		setNumber(F242, value);
	}

	/**
	 * Set the <code>F242</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF242(Field<? extends Number> field) {
		setNumber(F242, field);
	}

	/**
	 * Set the <code>F243</code> parameter to the function
	 */
	public void setF243(Number value) {
		setNumber(F243, value);
	}

	/**
	 * Set the <code>F243</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF243(Field<? extends Number> field) {
		setNumber(F243, field);
	}

	/**
	 * Set the <code>F244</code> parameter to the function
	 */
	public void setF244(Number value) {
		setNumber(F244, value);
	}

	/**
	 * Set the <code>F244</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF244(Field<? extends Number> field) {
		setNumber(F244, field);
	}

	/**
	 * Set the <code>F245</code> parameter to the function
	 */
	public void setF245(Number value) {
		setNumber(F245, value);
	}

	/**
	 * Set the <code>F245</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF245(Field<? extends Number> field) {
		setNumber(F245, field);
	}

	/**
	 * Set the <code>F246</code> parameter to the function
	 */
	public void setF246(Number value) {
		setNumber(F246, value);
	}

	/**
	 * Set the <code>F246</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF246(Field<? extends Number> field) {
		setNumber(F246, field);
	}

	/**
	 * Set the <code>F247</code> parameter to the function
	 */
	public void setF247(Number value) {
		setNumber(F247, value);
	}

	/**
	 * Set the <code>F247</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF247(Field<? extends Number> field) {
		setNumber(F247, field);
	}

	/**
	 * Set the <code>F248</code> parameter to the function
	 */
	public void setF248(Number value) {
		setNumber(F248, value);
	}

	/**
	 * Set the <code>F248</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF248(Field<? extends Number> field) {
		setNumber(F248, field);
	}

	/**
	 * Set the <code>F249</code> parameter to the function
	 */
	public void setF249(Number value) {
		setNumber(F249, value);
	}

	/**
	 * Set the <code>F249</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF249(Field<? extends Number> field) {
		setNumber(F249, field);
	}

	/**
	 * Set the <code>F250</code> parameter to the function
	 */
	public void setF250(Number value) {
		setNumber(F250, value);
	}

	/**
	 * Set the <code>F250</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF250(Field<? extends Number> field) {
		setNumber(F250, field);
	}

	/**
	 * Set the <code>F251</code> parameter to the function
	 */
	public void setF251(Number value) {
		setNumber(F251, value);
	}

	/**
	 * Set the <code>F251</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF251(Field<? extends Number> field) {
		setNumber(F251, field);
	}

	/**
	 * Set the <code>F252</code> parameter to the function
	 */
	public void setF252(Number value) {
		setNumber(F252, value);
	}

	/**
	 * Set the <code>F252</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF252(Field<? extends Number> field) {
		setNumber(F252, field);
	}

	/**
	 * Set the <code>F253</code> parameter to the function
	 */
	public void setF253(Number value) {
		setNumber(F253, value);
	}

	/**
	 * Set the <code>F253</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF253(Field<? extends Number> field) {
		setNumber(F253, field);
	}

	/**
	 * Set the <code>F254</code> parameter to the function
	 */
	public void setF254(Number value) {
		setNumber(F254, value);
	}

	/**
	 * Set the <code>F254</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF254(Field<? extends Number> field) {
		setNumber(F254, field);
	}

	/**
	 * Set the <code>F255</code> parameter to the function
	 */
	public void setF255(Number value) {
		setNumber(F255, value);
	}

	/**
	 * Set the <code>F255</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF255(Field<? extends Number> field) {
		setNumber(F255, field);
	}

	/**
	 * Set the <code>F256</code> parameter to the function
	 */
	public void setF256(Number value) {
		setNumber(F256, value);
	}

	/**
	 * Set the <code>F256</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF256(Field<? extends Number> field) {
		setNumber(F256, field);
	}

	/**
	 * Set the <code>F257</code> parameter to the function
	 */
	public void setF257(Number value) {
		setNumber(F257, value);
	}

	/**
	 * Set the <code>F257</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF257(Field<? extends Number> field) {
		setNumber(F257, field);
	}

	/**
	 * Set the <code>F258</code> parameter to the function
	 */
	public void setF258(Number value) {
		setNumber(F258, value);
	}

	/**
	 * Set the <code>F258</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF258(Field<? extends Number> field) {
		setNumber(F258, field);
	}

	/**
	 * Set the <code>F259</code> parameter to the function
	 */
	public void setF259(Number value) {
		setNumber(F259, value);
	}

	/**
	 * Set the <code>F259</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF259(Field<? extends Number> field) {
		setNumber(F259, field);
	}

	/**
	 * Set the <code>F260</code> parameter to the function
	 */
	public void setF260(Number value) {
		setNumber(F260, value);
	}

	/**
	 * Set the <code>F260</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF260(Field<? extends Number> field) {
		setNumber(F260, field);
	}

	/**
	 * Set the <code>F261</code> parameter to the function
	 */
	public void setF261(Number value) {
		setNumber(F261, value);
	}

	/**
	 * Set the <code>F261</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF261(Field<? extends Number> field) {
		setNumber(F261, field);
	}

	/**
	 * Set the <code>F262</code> parameter to the function
	 */
	public void setF262(Number value) {
		setNumber(F262, value);
	}

	/**
	 * Set the <code>F262</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF262(Field<? extends Number> field) {
		setNumber(F262, field);
	}

	/**
	 * Set the <code>F263</code> parameter to the function
	 */
	public void setF263(Number value) {
		setNumber(F263, value);
	}

	/**
	 * Set the <code>F263</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF263(Field<? extends Number> field) {
		setNumber(F263, field);
	}

	/**
	 * Set the <code>F264</code> parameter to the function
	 */
	public void setF264(Number value) {
		setNumber(F264, value);
	}

	/**
	 * Set the <code>F264</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF264(Field<? extends Number> field) {
		setNumber(F264, field);
	}

	/**
	 * Set the <code>F265</code> parameter to the function
	 */
	public void setF265(Number value) {
		setNumber(F265, value);
	}

	/**
	 * Set the <code>F265</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF265(Field<? extends Number> field) {
		setNumber(F265, field);
	}

	/**
	 * Set the <code>F266</code> parameter to the function
	 */
	public void setF266(Number value) {
		setNumber(F266, value);
	}

	/**
	 * Set the <code>F266</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF266(Field<? extends Number> field) {
		setNumber(F266, field);
	}

	/**
	 * Set the <code>F267</code> parameter to the function
	 */
	public void setF267(Number value) {
		setNumber(F267, value);
	}

	/**
	 * Set the <code>F267</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF267(Field<? extends Number> field) {
		setNumber(F267, field);
	}

	/**
	 * Set the <code>F268</code> parameter to the function
	 */
	public void setF268(Number value) {
		setNumber(F268, value);
	}

	/**
	 * Set the <code>F268</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF268(Field<? extends Number> field) {
		setNumber(F268, field);
	}

	/**
	 * Set the <code>F269</code> parameter to the function
	 */
	public void setF269(Number value) {
		setNumber(F269, value);
	}

	/**
	 * Set the <code>F269</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF269(Field<? extends Number> field) {
		setNumber(F269, field);
	}

	/**
	 * Set the <code>F270</code> parameter to the function
	 */
	public void setF270(Number value) {
		setNumber(F270, value);
	}

	/**
	 * Set the <code>F270</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF270(Field<? extends Number> field) {
		setNumber(F270, field);
	}

	/**
	 * Set the <code>F271</code> parameter to the function
	 */
	public void setF271(Number value) {
		setNumber(F271, value);
	}

	/**
	 * Set the <code>F271</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF271(Field<? extends Number> field) {
		setNumber(F271, field);
	}

	/**
	 * Set the <code>F272</code> parameter to the function
	 */
	public void setF272(Number value) {
		setNumber(F272, value);
	}

	/**
	 * Set the <code>F272</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF272(Field<? extends Number> field) {
		setNumber(F272, field);
	}

	/**
	 * Set the <code>F273</code> parameter to the function
	 */
	public void setF273(Number value) {
		setNumber(F273, value);
	}

	/**
	 * Set the <code>F273</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF273(Field<? extends Number> field) {
		setNumber(F273, field);
	}

	/**
	 * Set the <code>F274</code> parameter to the function
	 */
	public void setF274(Number value) {
		setNumber(F274, value);
	}

	/**
	 * Set the <code>F274</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF274(Field<? extends Number> field) {
		setNumber(F274, field);
	}

	/**
	 * Set the <code>F275</code> parameter to the function
	 */
	public void setF275(Number value) {
		setNumber(F275, value);
	}

	/**
	 * Set the <code>F275</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF275(Field<? extends Number> field) {
		setNumber(F275, field);
	}

	/**
	 * Set the <code>F276</code> parameter to the function
	 */
	public void setF276(Number value) {
		setNumber(F276, value);
	}

	/**
	 * Set the <code>F276</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF276(Field<? extends Number> field) {
		setNumber(F276, field);
	}

	/**
	 * Set the <code>F277</code> parameter to the function
	 */
	public void setF277(Number value) {
		setNumber(F277, value);
	}

	/**
	 * Set the <code>F277</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF277(Field<? extends Number> field) {
		setNumber(F277, field);
	}

	/**
	 * Set the <code>F278</code> parameter to the function
	 */
	public void setF278(Number value) {
		setNumber(F278, value);
	}

	/**
	 * Set the <code>F278</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF278(Field<? extends Number> field) {
		setNumber(F278, field);
	}

	/**
	 * Set the <code>F279</code> parameter to the function
	 */
	public void setF279(Number value) {
		setNumber(F279, value);
	}

	/**
	 * Set the <code>F279</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF279(Field<? extends Number> field) {
		setNumber(F279, field);
	}

	/**
	 * Set the <code>F280</code> parameter to the function
	 */
	public void setF280(Number value) {
		setNumber(F280, value);
	}

	/**
	 * Set the <code>F280</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF280(Field<? extends Number> field) {
		setNumber(F280, field);
	}

	/**
	 * Set the <code>F281</code> parameter to the function
	 */
	public void setF281(Number value) {
		setNumber(F281, value);
	}

	/**
	 * Set the <code>F281</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF281(Field<? extends Number> field) {
		setNumber(F281, field);
	}

	/**
	 * Set the <code>F282</code> parameter to the function
	 */
	public void setF282(Number value) {
		setNumber(F282, value);
	}

	/**
	 * Set the <code>F282</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF282(Field<? extends Number> field) {
		setNumber(F282, field);
	}

	/**
	 * Set the <code>F283</code> parameter to the function
	 */
	public void setF283(Number value) {
		setNumber(F283, value);
	}

	/**
	 * Set the <code>F283</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF283(Field<? extends Number> field) {
		setNumber(F283, field);
	}

	/**
	 * Set the <code>F284</code> parameter to the function
	 */
	public void setF284(Number value) {
		setNumber(F284, value);
	}

	/**
	 * Set the <code>F284</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF284(Field<? extends Number> field) {
		setNumber(F284, field);
	}

	/**
	 * Set the <code>F285</code> parameter to the function
	 */
	public void setF285(Number value) {
		setNumber(F285, value);
	}

	/**
	 * Set the <code>F285</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF285(Field<? extends Number> field) {
		setNumber(F285, field);
	}

	/**
	 * Set the <code>F286</code> parameter to the function
	 */
	public void setF286(Number value) {
		setNumber(F286, value);
	}

	/**
	 * Set the <code>F286</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF286(Field<? extends Number> field) {
		setNumber(F286, field);
	}

	/**
	 * Set the <code>F287</code> parameter to the function
	 */
	public void setF287(Number value) {
		setNumber(F287, value);
	}

	/**
	 * Set the <code>F287</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF287(Field<? extends Number> field) {
		setNumber(F287, field);
	}

	/**
	 * Set the <code>F288</code> parameter to the function
	 */
	public void setF288(Number value) {
		setNumber(F288, value);
	}

	/**
	 * Set the <code>F288</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF288(Field<? extends Number> field) {
		setNumber(F288, field);
	}

	/**
	 * Set the <code>F289</code> parameter to the function
	 */
	public void setF289(Number value) {
		setNumber(F289, value);
	}

	/**
	 * Set the <code>F289</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF289(Field<? extends Number> field) {
		setNumber(F289, field);
	}

	/**
	 * Set the <code>F290</code> parameter to the function
	 */
	public void setF290(Number value) {
		setNumber(F290, value);
	}

	/**
	 * Set the <code>F290</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF290(Field<? extends Number> field) {
		setNumber(F290, field);
	}

	/**
	 * Set the <code>F291</code> parameter to the function
	 */
	public void setF291(Number value) {
		setNumber(F291, value);
	}

	/**
	 * Set the <code>F291</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF291(Field<? extends Number> field) {
		setNumber(F291, field);
	}

	/**
	 * Set the <code>F292</code> parameter to the function
	 */
	public void setF292(Number value) {
		setNumber(F292, value);
	}

	/**
	 * Set the <code>F292</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF292(Field<? extends Number> field) {
		setNumber(F292, field);
	}

	/**
	 * Set the <code>F293</code> parameter to the function
	 */
	public void setF293(Number value) {
		setNumber(F293, value);
	}

	/**
	 * Set the <code>F293</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF293(Field<? extends Number> field) {
		setNumber(F293, field);
	}

	/**
	 * Set the <code>F294</code> parameter to the function
	 */
	public void setF294(Number value) {
		setNumber(F294, value);
	}

	/**
	 * Set the <code>F294</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF294(Field<? extends Number> field) {
		setNumber(F294, field);
	}

	/**
	 * Set the <code>F295</code> parameter to the function
	 */
	public void setF295(Number value) {
		setNumber(F295, value);
	}

	/**
	 * Set the <code>F295</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF295(Field<? extends Number> field) {
		setNumber(F295, field);
	}

	/**
	 * Set the <code>F296</code> parameter to the function
	 */
	public void setF296(Number value) {
		setNumber(F296, value);
	}

	/**
	 * Set the <code>F296</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF296(Field<? extends Number> field) {
		setNumber(F296, field);
	}

	/**
	 * Set the <code>F297</code> parameter to the function
	 */
	public void setF297(Number value) {
		setNumber(F297, value);
	}

	/**
	 * Set the <code>F297</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF297(Field<? extends Number> field) {
		setNumber(F297, field);
	}

	/**
	 * Set the <code>F298</code> parameter to the function
	 */
	public void setF298(Number value) {
		setNumber(F298, value);
	}

	/**
	 * Set the <code>F298</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF298(Field<? extends Number> field) {
		setNumber(F298, field);
	}

	/**
	 * Set the <code>F299</code> parameter to the function
	 */
	public void setF299(Number value) {
		setNumber(F299, value);
	}

	/**
	 * Set the <code>F299</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF299(Field<? extends Number> field) {
		setNumber(F299, field);
	}

	/**
	 * Set the <code>F300</code> parameter to the function
	 */
	public void setF300(Number value) {
		setNumber(F300, value);
	}

	/**
	 * Set the <code>F300</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF300(Field<? extends Number> field) {
		setNumber(F300, field);
	}

	/**
	 * Set the <code>F301</code> parameter to the function
	 */
	public void setF301(Number value) {
		setNumber(F301, value);
	}

	/**
	 * Set the <code>F301</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF301(Field<? extends Number> field) {
		setNumber(F301, field);
	}

	/**
	 * Set the <code>F302</code> parameter to the function
	 */
	public void setF302(Number value) {
		setNumber(F302, value);
	}

	/**
	 * Set the <code>F302</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF302(Field<? extends Number> field) {
		setNumber(F302, field);
	}

	/**
	 * Set the <code>F303</code> parameter to the function
	 */
	public void setF303(Number value) {
		setNumber(F303, value);
	}

	/**
	 * Set the <code>F303</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF303(Field<? extends Number> field) {
		setNumber(F303, field);
	}

	/**
	 * Set the <code>F304</code> parameter to the function
	 */
	public void setF304(Number value) {
		setNumber(F304, value);
	}

	/**
	 * Set the <code>F304</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF304(Field<? extends Number> field) {
		setNumber(F304, field);
	}

	/**
	 * Set the <code>F305</code> parameter to the function
	 */
	public void setF305(Number value) {
		setNumber(F305, value);
	}

	/**
	 * Set the <code>F305</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF305(Field<? extends Number> field) {
		setNumber(F305, field);
	}

	/**
	 * Set the <code>F306</code> parameter to the function
	 */
	public void setF306(Number value) {
		setNumber(F306, value);
	}

	/**
	 * Set the <code>F306</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF306(Field<? extends Number> field) {
		setNumber(F306, field);
	}

	/**
	 * Set the <code>F307</code> parameter to the function
	 */
	public void setF307(Number value) {
		setNumber(F307, value);
	}

	/**
	 * Set the <code>F307</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF307(Field<? extends Number> field) {
		setNumber(F307, field);
	}

	/**
	 * Set the <code>F308</code> parameter to the function
	 */
	public void setF308(Number value) {
		setNumber(F308, value);
	}

	/**
	 * Set the <code>F308</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF308(Field<? extends Number> field) {
		setNumber(F308, field);
	}

	/**
	 * Set the <code>F309</code> parameter to the function
	 */
	public void setF309(Number value) {
		setNumber(F309, value);
	}

	/**
	 * Set the <code>F309</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF309(Field<? extends Number> field) {
		setNumber(F309, field);
	}

	/**
	 * Set the <code>F310</code> parameter to the function
	 */
	public void setF310(Number value) {
		setNumber(F310, value);
	}

	/**
	 * Set the <code>F310</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF310(Field<? extends Number> field) {
		setNumber(F310, field);
	}

	/**
	 * Set the <code>F311</code> parameter to the function
	 */
	public void setF311(Number value) {
		setNumber(F311, value);
	}

	/**
	 * Set the <code>F311</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF311(Field<? extends Number> field) {
		setNumber(F311, field);
	}

	/**
	 * Set the <code>F312</code> parameter to the function
	 */
	public void setF312(Number value) {
		setNumber(F312, value);
	}

	/**
	 * Set the <code>F312</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF312(Field<? extends Number> field) {
		setNumber(F312, field);
	}

	/**
	 * Set the <code>F313</code> parameter to the function
	 */
	public void setF313(Number value) {
		setNumber(F313, value);
	}

	/**
	 * Set the <code>F313</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF313(Field<? extends Number> field) {
		setNumber(F313, field);
	}

	/**
	 * Set the <code>F314</code> parameter to the function
	 */
	public void setF314(Number value) {
		setNumber(F314, value);
	}

	/**
	 * Set the <code>F314</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF314(Field<? extends Number> field) {
		setNumber(F314, field);
	}

	/**
	 * Set the <code>F315</code> parameter to the function
	 */
	public void setF315(Number value) {
		setNumber(F315, value);
	}

	/**
	 * Set the <code>F315</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF315(Field<? extends Number> field) {
		setNumber(F315, field);
	}

	/**
	 * Set the <code>F316</code> parameter to the function
	 */
	public void setF316(Number value) {
		setNumber(F316, value);
	}

	/**
	 * Set the <code>F316</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF316(Field<? extends Number> field) {
		setNumber(F316, field);
	}

	/**
	 * Set the <code>F317</code> parameter to the function
	 */
	public void setF317(Number value) {
		setNumber(F317, value);
	}

	/**
	 * Set the <code>F317</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF317(Field<? extends Number> field) {
		setNumber(F317, field);
	}

	/**
	 * Set the <code>F318</code> parameter to the function
	 */
	public void setF318(Number value) {
		setNumber(F318, value);
	}

	/**
	 * Set the <code>F318</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF318(Field<? extends Number> field) {
		setNumber(F318, field);
	}

	/**
	 * Set the <code>F319</code> parameter to the function
	 */
	public void setF319(Number value) {
		setNumber(F319, value);
	}

	/**
	 * Set the <code>F319</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF319(Field<? extends Number> field) {
		setNumber(F319, field);
	}

	/**
	 * Set the <code>F320</code> parameter to the function
	 */
	public void setF320(Number value) {
		setNumber(F320, value);
	}

	/**
	 * Set the <code>F320</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF320(Field<? extends Number> field) {
		setNumber(F320, field);
	}

	/**
	 * Set the <code>F321</code> parameter to the function
	 */
	public void setF321(Number value) {
		setNumber(F321, value);
	}

	/**
	 * Set the <code>F321</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF321(Field<? extends Number> field) {
		setNumber(F321, field);
	}

	/**
	 * Set the <code>F322</code> parameter to the function
	 */
	public void setF322(Number value) {
		setNumber(F322, value);
	}

	/**
	 * Set the <code>F322</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF322(Field<? extends Number> field) {
		setNumber(F322, field);
	}

	/**
	 * Set the <code>F323</code> parameter to the function
	 */
	public void setF323(Number value) {
		setNumber(F323, value);
	}

	/**
	 * Set the <code>F323</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF323(Field<? extends Number> field) {
		setNumber(F323, field);
	}

	/**
	 * Set the <code>F324</code> parameter to the function
	 */
	public void setF324(Number value) {
		setNumber(F324, value);
	}

	/**
	 * Set the <code>F324</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF324(Field<? extends Number> field) {
		setNumber(F324, field);
	}

	/**
	 * Set the <code>F325</code> parameter to the function
	 */
	public void setF325(Number value) {
		setNumber(F325, value);
	}

	/**
	 * Set the <code>F325</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF325(Field<? extends Number> field) {
		setNumber(F325, field);
	}

	/**
	 * Set the <code>F326</code> parameter to the function
	 */
	public void setF326(Number value) {
		setNumber(F326, value);
	}

	/**
	 * Set the <code>F326</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF326(Field<? extends Number> field) {
		setNumber(F326, field);
	}

	/**
	 * Set the <code>F327</code> parameter to the function
	 */
	public void setF327(Number value) {
		setNumber(F327, value);
	}

	/**
	 * Set the <code>F327</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF327(Field<? extends Number> field) {
		setNumber(F327, field);
	}

	/**
	 * Set the <code>F328</code> parameter to the function
	 */
	public void setF328(Number value) {
		setNumber(F328, value);
	}

	/**
	 * Set the <code>F328</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF328(Field<? extends Number> field) {
		setNumber(F328, field);
	}

	/**
	 * Set the <code>F329</code> parameter to the function
	 */
	public void setF329(Number value) {
		setNumber(F329, value);
	}

	/**
	 * Set the <code>F329</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF329(Field<? extends Number> field) {
		setNumber(F329, field);
	}

	/**
	 * Set the <code>F330</code> parameter to the function
	 */
	public void setF330(Number value) {
		setNumber(F330, value);
	}

	/**
	 * Set the <code>F330</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF330(Field<? extends Number> field) {
		setNumber(F330, field);
	}

	/**
	 * Set the <code>F331</code> parameter to the function
	 */
	public void setF331(Number value) {
		setNumber(F331, value);
	}

	/**
	 * Set the <code>F331</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF331(Field<? extends Number> field) {
		setNumber(F331, field);
	}

	/**
	 * Set the <code>F332</code> parameter to the function
	 */
	public void setF332(Number value) {
		setNumber(F332, value);
	}

	/**
	 * Set the <code>F332</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF332(Field<? extends Number> field) {
		setNumber(F332, field);
	}

	/**
	 * Set the <code>F333</code> parameter to the function
	 */
	public void setF333(Number value) {
		setNumber(F333, value);
	}

	/**
	 * Set the <code>F333</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF333(Field<? extends Number> field) {
		setNumber(F333, field);
	}

	/**
	 * Set the <code>F334</code> parameter to the function
	 */
	public void setF334(Number value) {
		setNumber(F334, value);
	}

	/**
	 * Set the <code>F334</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF334(Field<? extends Number> field) {
		setNumber(F334, field);
	}

	/**
	 * Set the <code>F335</code> parameter to the function
	 */
	public void setF335(Number value) {
		setNumber(F335, value);
	}

	/**
	 * Set the <code>F335</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF335(Field<? extends Number> field) {
		setNumber(F335, field);
	}

	/**
	 * Set the <code>F336</code> parameter to the function
	 */
	public void setF336(Number value) {
		setNumber(F336, value);
	}

	/**
	 * Set the <code>F336</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF336(Field<? extends Number> field) {
		setNumber(F336, field);
	}

	/**
	 * Set the <code>F337</code> parameter to the function
	 */
	public void setF337(Number value) {
		setNumber(F337, value);
	}

	/**
	 * Set the <code>F337</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF337(Field<? extends Number> field) {
		setNumber(F337, field);
	}

	/**
	 * Set the <code>F338</code> parameter to the function
	 */
	public void setF338(Number value) {
		setNumber(F338, value);
	}

	/**
	 * Set the <code>F338</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF338(Field<? extends Number> field) {
		setNumber(F338, field);
	}

	/**
	 * Set the <code>F339</code> parameter to the function
	 */
	public void setF339(Number value) {
		setNumber(F339, value);
	}

	/**
	 * Set the <code>F339</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF339(Field<? extends Number> field) {
		setNumber(F339, field);
	}

	/**
	 * Set the <code>F340</code> parameter to the function
	 */
	public void setF340(Number value) {
		setNumber(F340, value);
	}

	/**
	 * Set the <code>F340</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF340(Field<? extends Number> field) {
		setNumber(F340, field);
	}

	/**
	 * Set the <code>F341</code> parameter to the function
	 */
	public void setF341(Number value) {
		setNumber(F341, value);
	}

	/**
	 * Set the <code>F341</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF341(Field<? extends Number> field) {
		setNumber(F341, field);
	}

	/**
	 * Set the <code>F342</code> parameter to the function
	 */
	public void setF342(Number value) {
		setNumber(F342, value);
	}

	/**
	 * Set the <code>F342</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF342(Field<? extends Number> field) {
		setNumber(F342, field);
	}

	/**
	 * Set the <code>F343</code> parameter to the function
	 */
	public void setF343(Number value) {
		setNumber(F343, value);
	}

	/**
	 * Set the <code>F343</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF343(Field<? extends Number> field) {
		setNumber(F343, field);
	}

	/**
	 * Set the <code>F344</code> parameter to the function
	 */
	public void setF344(Number value) {
		setNumber(F344, value);
	}

	/**
	 * Set the <code>F344</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF344(Field<? extends Number> field) {
		setNumber(F344, field);
	}

	/**
	 * Set the <code>F345</code> parameter to the function
	 */
	public void setF345(Number value) {
		setNumber(F345, value);
	}

	/**
	 * Set the <code>F345</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF345(Field<? extends Number> field) {
		setNumber(F345, field);
	}

	/**
	 * Set the <code>F346</code> parameter to the function
	 */
	public void setF346(Number value) {
		setNumber(F346, value);
	}

	/**
	 * Set the <code>F346</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF346(Field<? extends Number> field) {
		setNumber(F346, field);
	}

	/**
	 * Set the <code>F347</code> parameter to the function
	 */
	public void setF347(Number value) {
		setNumber(F347, value);
	}

	/**
	 * Set the <code>F347</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF347(Field<? extends Number> field) {
		setNumber(F347, field);
	}

	/**
	 * Set the <code>F348</code> parameter to the function
	 */
	public void setF348(Number value) {
		setNumber(F348, value);
	}

	/**
	 * Set the <code>F348</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF348(Field<? extends Number> field) {
		setNumber(F348, field);
	}

	/**
	 * Set the <code>F349</code> parameter to the function
	 */
	public void setF349(Number value) {
		setNumber(F349, value);
	}

	/**
	 * Set the <code>F349</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF349(Field<? extends Number> field) {
		setNumber(F349, field);
	}

	/**
	 * Set the <code>F350</code> parameter to the function
	 */
	public void setF350(Number value) {
		setNumber(F350, value);
	}

	/**
	 * Set the <code>F350</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF350(Field<? extends Number> field) {
		setNumber(F350, field);
	}

	/**
	 * Set the <code>F351</code> parameter to the function
	 */
	public void setF351(Number value) {
		setNumber(F351, value);
	}

	/**
	 * Set the <code>F351</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF351(Field<? extends Number> field) {
		setNumber(F351, field);
	}

	/**
	 * Set the <code>F352</code> parameter to the function
	 */
	public void setF352(Number value) {
		setNumber(F352, value);
	}

	/**
	 * Set the <code>F352</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF352(Field<? extends Number> field) {
		setNumber(F352, field);
	}

	/**
	 * Set the <code>F353</code> parameter to the function
	 */
	public void setF353(Number value) {
		setNumber(F353, value);
	}

	/**
	 * Set the <code>F353</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF353(Field<? extends Number> field) {
		setNumber(F353, field);
	}

	/**
	 * Set the <code>F354</code> parameter to the function
	 */
	public void setF354(Number value) {
		setNumber(F354, value);
	}

	/**
	 * Set the <code>F354</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF354(Field<? extends Number> field) {
		setNumber(F354, field);
	}

	/**
	 * Set the <code>F355</code> parameter to the function
	 */
	public void setF355(Number value) {
		setNumber(F355, value);
	}

	/**
	 * Set the <code>F355</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF355(Field<? extends Number> field) {
		setNumber(F355, field);
	}

	/**
	 * Set the <code>F356</code> parameter to the function
	 */
	public void setF356(Number value) {
		setNumber(F356, value);
	}

	/**
	 * Set the <code>F356</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF356(Field<? extends Number> field) {
		setNumber(F356, field);
	}

	/**
	 * Set the <code>F357</code> parameter to the function
	 */
	public void setF357(Number value) {
		setNumber(F357, value);
	}

	/**
	 * Set the <code>F357</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF357(Field<? extends Number> field) {
		setNumber(F357, field);
	}

	/**
	 * Set the <code>F358</code> parameter to the function
	 */
	public void setF358(Number value) {
		setNumber(F358, value);
	}

	/**
	 * Set the <code>F358</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF358(Field<? extends Number> field) {
		setNumber(F358, field);
	}

	/**
	 * Set the <code>F359</code> parameter to the function
	 */
	public void setF359(Number value) {
		setNumber(F359, value);
	}

	/**
	 * Set the <code>F359</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF359(Field<? extends Number> field) {
		setNumber(F359, field);
	}

	/**
	 * Set the <code>F360</code> parameter to the function
	 */
	public void setF360(Number value) {
		setNumber(F360, value);
	}

	/**
	 * Set the <code>F360</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF360(Field<? extends Number> field) {
		setNumber(F360, field);
	}

	/**
	 * Set the <code>F361</code> parameter to the function
	 */
	public void setF361(Number value) {
		setNumber(F361, value);
	}

	/**
	 * Set the <code>F361</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF361(Field<? extends Number> field) {
		setNumber(F361, field);
	}

	/**
	 * Set the <code>F362</code> parameter to the function
	 */
	public void setF362(Number value) {
		setNumber(F362, value);
	}

	/**
	 * Set the <code>F362</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF362(Field<? extends Number> field) {
		setNumber(F362, field);
	}

	/**
	 * Set the <code>F363</code> parameter to the function
	 */
	public void setF363(Number value) {
		setNumber(F363, value);
	}

	/**
	 * Set the <code>F363</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF363(Field<? extends Number> field) {
		setNumber(F363, field);
	}

	/**
	 * Set the <code>F364</code> parameter to the function
	 */
	public void setF364(Number value) {
		setNumber(F364, value);
	}

	/**
	 * Set the <code>F364</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF364(Field<? extends Number> field) {
		setNumber(F364, field);
	}

	/**
	 * Set the <code>F365</code> parameter to the function
	 */
	public void setF365(Number value) {
		setNumber(F365, value);
	}

	/**
	 * Set the <code>F365</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF365(Field<? extends Number> field) {
		setNumber(F365, field);
	}

	/**
	 * Set the <code>F366</code> parameter to the function
	 */
	public void setF366(Number value) {
		setNumber(F366, value);
	}

	/**
	 * Set the <code>F366</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF366(Field<? extends Number> field) {
		setNumber(F366, field);
	}

	/**
	 * Set the <code>F367</code> parameter to the function
	 */
	public void setF367(Number value) {
		setNumber(F367, value);
	}

	/**
	 * Set the <code>F367</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF367(Field<? extends Number> field) {
		setNumber(F367, field);
	}

	/**
	 * Set the <code>F368</code> parameter to the function
	 */
	public void setF368(Number value) {
		setNumber(F368, value);
	}

	/**
	 * Set the <code>F368</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF368(Field<? extends Number> field) {
		setNumber(F368, field);
	}

	/**
	 * Set the <code>F369</code> parameter to the function
	 */
	public void setF369(Number value) {
		setNumber(F369, value);
	}

	/**
	 * Set the <code>F369</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF369(Field<? extends Number> field) {
		setNumber(F369, field);
	}

	/**
	 * Set the <code>F370</code> parameter to the function
	 */
	public void setF370(Number value) {
		setNumber(F370, value);
	}

	/**
	 * Set the <code>F370</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF370(Field<? extends Number> field) {
		setNumber(F370, field);
	}

	/**
	 * Set the <code>F371</code> parameter to the function
	 */
	public void setF371(Number value) {
		setNumber(F371, value);
	}

	/**
	 * Set the <code>F371</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF371(Field<? extends Number> field) {
		setNumber(F371, field);
	}

	/**
	 * Set the <code>F372</code> parameter to the function
	 */
	public void setF372(Number value) {
		setNumber(F372, value);
	}

	/**
	 * Set the <code>F372</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF372(Field<? extends Number> field) {
		setNumber(F372, field);
	}

	/**
	 * Set the <code>F373</code> parameter to the function
	 */
	public void setF373(Number value) {
		setNumber(F373, value);
	}

	/**
	 * Set the <code>F373</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF373(Field<? extends Number> field) {
		setNumber(F373, field);
	}

	/**
	 * Set the <code>F374</code> parameter to the function
	 */
	public void setF374(Number value) {
		setNumber(F374, value);
	}

	/**
	 * Set the <code>F374</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF374(Field<? extends Number> field) {
		setNumber(F374, field);
	}

	/**
	 * Set the <code>F375</code> parameter to the function
	 */
	public void setF375(Number value) {
		setNumber(F375, value);
	}

	/**
	 * Set the <code>F375</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF375(Field<? extends Number> field) {
		setNumber(F375, field);
	}

	/**
	 * Set the <code>F376</code> parameter to the function
	 */
	public void setF376(Number value) {
		setNumber(F376, value);
	}

	/**
	 * Set the <code>F376</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF376(Field<? extends Number> field) {
		setNumber(F376, field);
	}

	/**
	 * Set the <code>F377</code> parameter to the function
	 */
	public void setF377(Number value) {
		setNumber(F377, value);
	}

	/**
	 * Set the <code>F377</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF377(Field<? extends Number> field) {
		setNumber(F377, field);
	}

	/**
	 * Set the <code>F378</code> parameter to the function
	 */
	public void setF378(Number value) {
		setNumber(F378, value);
	}

	/**
	 * Set the <code>F378</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF378(Field<? extends Number> field) {
		setNumber(F378, field);
	}

	/**
	 * Set the <code>F379</code> parameter to the function
	 */
	public void setF379(Number value) {
		setNumber(F379, value);
	}

	/**
	 * Set the <code>F379</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF379(Field<? extends Number> field) {
		setNumber(F379, field);
	}

	/**
	 * Set the <code>F380</code> parameter to the function
	 */
	public void setF380(Number value) {
		setNumber(F380, value);
	}

	/**
	 * Set the <code>F380</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF380(Field<? extends Number> field) {
		setNumber(F380, field);
	}

	/**
	 * Set the <code>F381</code> parameter to the function
	 */
	public void setF381(Number value) {
		setNumber(F381, value);
	}

	/**
	 * Set the <code>F381</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF381(Field<? extends Number> field) {
		setNumber(F381, field);
	}

	/**
	 * Set the <code>F382</code> parameter to the function
	 */
	public void setF382(Number value) {
		setNumber(F382, value);
	}

	/**
	 * Set the <code>F382</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF382(Field<? extends Number> field) {
		setNumber(F382, field);
	}

	/**
	 * Set the <code>F383</code> parameter to the function
	 */
	public void setF383(Number value) {
		setNumber(F383, value);
	}

	/**
	 * Set the <code>F383</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF383(Field<? extends Number> field) {
		setNumber(F383, field);
	}

	/**
	 * Set the <code>F384</code> parameter to the function
	 */
	public void setF384(Number value) {
		setNumber(F384, value);
	}

	/**
	 * Set the <code>F384</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF384(Field<? extends Number> field) {
		setNumber(F384, field);
	}

	/**
	 * Set the <code>F385</code> parameter to the function
	 */
	public void setF385(Number value) {
		setNumber(F385, value);
	}

	/**
	 * Set the <code>F385</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF385(Field<? extends Number> field) {
		setNumber(F385, field);
	}

	/**
	 * Set the <code>F386</code> parameter to the function
	 */
	public void setF386(Number value) {
		setNumber(F386, value);
	}

	/**
	 * Set the <code>F386</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF386(Field<? extends Number> field) {
		setNumber(F386, field);
	}

	/**
	 * Set the <code>F387</code> parameter to the function
	 */
	public void setF387(Number value) {
		setNumber(F387, value);
	}

	/**
	 * Set the <code>F387</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF387(Field<? extends Number> field) {
		setNumber(F387, field);
	}

	/**
	 * Set the <code>F388</code> parameter to the function
	 */
	public void setF388(Number value) {
		setNumber(F388, value);
	}

	/**
	 * Set the <code>F388</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF388(Field<? extends Number> field) {
		setNumber(F388, field);
	}

	/**
	 * Set the <code>F389</code> parameter to the function
	 */
	public void setF389(Number value) {
		setNumber(F389, value);
	}

	/**
	 * Set the <code>F389</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF389(Field<? extends Number> field) {
		setNumber(F389, field);
	}

	/**
	 * Set the <code>F390</code> parameter to the function
	 */
	public void setF390(Number value) {
		setNumber(F390, value);
	}

	/**
	 * Set the <code>F390</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF390(Field<? extends Number> field) {
		setNumber(F390, field);
	}

	/**
	 * Set the <code>F391</code> parameter to the function
	 */
	public void setF391(Number value) {
		setNumber(F391, value);
	}

	/**
	 * Set the <code>F391</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF391(Field<? extends Number> field) {
		setNumber(F391, field);
	}

	/**
	 * Set the <code>F392</code> parameter to the function
	 */
	public void setF392(Number value) {
		setNumber(F392, value);
	}

	/**
	 * Set the <code>F392</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF392(Field<? extends Number> field) {
		setNumber(F392, field);
	}

	/**
	 * Set the <code>F393</code> parameter to the function
	 */
	public void setF393(Number value) {
		setNumber(F393, value);
	}

	/**
	 * Set the <code>F393</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF393(Field<? extends Number> field) {
		setNumber(F393, field);
	}

	/**
	 * Set the <code>F394</code> parameter to the function
	 */
	public void setF394(Number value) {
		setNumber(F394, value);
	}

	/**
	 * Set the <code>F394</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF394(Field<? extends Number> field) {
		setNumber(F394, field);
	}

	/**
	 * Set the <code>F395</code> parameter to the function
	 */
	public void setF395(Number value) {
		setNumber(F395, value);
	}

	/**
	 * Set the <code>F395</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF395(Field<? extends Number> field) {
		setNumber(F395, field);
	}

	/**
	 * Set the <code>F396</code> parameter to the function
	 */
	public void setF396(Number value) {
		setNumber(F396, value);
	}

	/**
	 * Set the <code>F396</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF396(Field<? extends Number> field) {
		setNumber(F396, field);
	}

	/**
	 * Set the <code>F397</code> parameter to the function
	 */
	public void setF397(Number value) {
		setNumber(F397, value);
	}

	/**
	 * Set the <code>F397</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF397(Field<? extends Number> field) {
		setNumber(F397, field);
	}

	/**
	 * Set the <code>F398</code> parameter to the function
	 */
	public void setF398(Number value) {
		setNumber(F398, value);
	}

	/**
	 * Set the <code>F398</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF398(Field<? extends Number> field) {
		setNumber(F398, field);
	}

	/**
	 * Set the <code>F399</code> parameter to the function
	 */
	public void setF399(Number value) {
		setNumber(F399, value);
	}

	/**
	 * Set the <code>F399</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setF399(Field<? extends Number> field) {
		setNumber(F399, field);
	}
}
