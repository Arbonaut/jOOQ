/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oracle.generatedclasses.functions;


import java.math.BigDecimal;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Parameter;
import org.jooq.SQLDialect;
import org.jooq.Select;
import org.jooq.impl.ParameterImpl;
import org.jooq.impl.StoredFunctionImpl;
import org.jooq.test.oracle.generatedclasses.Test;
import org.jooq.util.oracle.OracleDataType;


/**
 * This class is generated by jOOQ.
 */
@Generated(value    = "http://jooq.sourceforge.net",
           comments = "This class is generated by jOOQ")
public class F317 extends StoredFunctionImpl<BigDecimal> {

	private static final long serialVersionUID = -1486091392;


	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> P1 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "P1", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> P2 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "P2", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> P3 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "P3", OracleDataType.NUMBER);

	/**
	 * An uncommented item
	 */
	public static final Parameter<BigDecimal> P4 = new ParameterImpl<BigDecimal>(SQLDialect.ORACLE, "P4", OracleDataType.NUMBER);

	/**
	 * No further instances allowed
	 */
	public F317() {
		super(SQLDialect.ORACLE, "F317", Test.TEST, OracleDataType.NUMBER);

		addInParameter(P1);
		addInParameter(P2);
		addInParameter(P3);
		addInParameter(P4);
	}

	/**
	 * Set the <code>P1</code> parameter to the function
	 */
	public void setP1(Number value) {
		setNumber(P1, value);
	}

	/**
	 * Set the <code>P1</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setP1(Field<? extends Number> field) {
		setNumber(P1, field);
	}

	/**
	 * Set the <code>P2</code> parameter to the function
	 */
	public void setP2(Number value) {
		setNumber(P2, value);
	}

	/**
	 * Set the <code>P2</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setP2(Field<? extends Number> field) {
		setNumber(P2, field);
	}

	/**
	 * Set the <code>P3</code> parameter to the function
	 */
	public void setP3(Number value) {
		setNumber(P3, value);
	}

	/**
	 * Set the <code>P3</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setP3(Field<? extends Number> field) {
		setNumber(P3, field);
	}

	/**
	 * Set the <code>P4</code> parameter to the function
	 */
	public void setP4(Number value) {
		setNumber(P4, value);
	}

	/**
	 * Set the <code>P4</code> parameter to the function
	 * <p>
	 * Use this method only, if the function is called as a {@link Field} in a {@link Select} statement!
	 */
	public void setP4(Field<? extends Number> field) {
		setNumber(P4, field);
	}
}
