/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oracle.generatedclasses;


import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.test.oracle.generatedclasses.functions.F317;
import org.jooq.test.oracle.generatedclasses.functions.F377;
import org.jooq.test.oracle.generatedclasses.functions.FArrays1;
import org.jooq.test.oracle.generatedclasses.functions.FArrays2;
import org.jooq.test.oracle.generatedclasses.functions.FArrays3;
import org.jooq.test.oracle.generatedclasses.functions.FAuthorExists;
import org.jooq.test.oracle.generatedclasses.functions.FNumber;
import org.jooq.test.oracle.generatedclasses.functions.FOne;
import org.jooq.test.oracle.generatedclasses.udt.records.UNumberArrayRecord;
import org.jooq.test.oracle.generatedclasses.udt.records.UNumberLongArrayRecord;
import org.jooq.test.oracle.generatedclasses.udt.records.UStringArrayRecord;


/**
 * This class is generated by jOOQ.
 *
 * Convenience access to all stored functions in TEST
 */
@Generated(value    = "http://jooq.sourceforge.net",
           comments = "This class is generated by jOOQ")
public final class Functions {

	/**
	 * Invoke F_ARRAYS1
	 *
	 * @param inArray
	 */
	public static UNumberArrayRecord fArrays1(Connection connection, UNumberArrayRecord inArray) throws SQLException {
		FArrays1 f = new FArrays1();
		f.setInArray(inArray);

		f.execute(connection);
		return f.getReturnValue();
	}

	/**
	 * Get F_ARRAYS1 as a field
	 *
	 * @param inArray
	 */
	public static Field<UNumberArrayRecord> fArrays1(UNumberArrayRecord inArray) {
		FArrays1 f = new FArrays1();
		f.setInArray(inArray);

		return f.asField();
	}

	/**
	 * Get F_ARRAYS1 as a field
	 *
	 * @param inArray
	 */
	public static Field<UNumberArrayRecord> fArrays1(Field<UNumberArrayRecord> inArray) {
		FArrays1 f = new FArrays1();
		f.setInArray(inArray);

		return f.asField();
	}

	/**
	 * Invoke F_ARRAYS2
	 *
	 * @param inArray
	 */
	public static UNumberLongArrayRecord fArrays2(Connection connection, UNumberLongArrayRecord inArray) throws SQLException {
		FArrays2 f = new FArrays2();
		f.setInArray(inArray);

		f.execute(connection);
		return f.getReturnValue();
	}

	/**
	 * Get F_ARRAYS2 as a field
	 *
	 * @param inArray
	 */
	public static Field<UNumberLongArrayRecord> fArrays2(UNumberLongArrayRecord inArray) {
		FArrays2 f = new FArrays2();
		f.setInArray(inArray);

		return f.asField();
	}

	/**
	 * Get F_ARRAYS2 as a field
	 *
	 * @param inArray
	 */
	public static Field<UNumberLongArrayRecord> fArrays2(Field<UNumberLongArrayRecord> inArray) {
		FArrays2 f = new FArrays2();
		f.setInArray(inArray);

		return f.asField();
	}

	/**
	 * Invoke F_ARRAYS3
	 *
	 * @param inArray
	 */
	public static UStringArrayRecord fArrays3(Connection connection, UStringArrayRecord inArray) throws SQLException {
		FArrays3 f = new FArrays3();
		f.setInArray(inArray);

		f.execute(connection);
		return f.getReturnValue();
	}

	/**
	 * Get F_ARRAYS3 as a field
	 *
	 * @param inArray
	 */
	public static Field<UStringArrayRecord> fArrays3(UStringArrayRecord inArray) {
		FArrays3 f = new FArrays3();
		f.setInArray(inArray);

		return f.asField();
	}

	/**
	 * Get F_ARRAYS3 as a field
	 *
	 * @param inArray
	 */
	public static Field<UStringArrayRecord> fArrays3(Field<UStringArrayRecord> inArray) {
		FArrays3 f = new FArrays3();
		f.setInArray(inArray);

		return f.asField();
	}

	/**
	 * Invoke F_AUTHOR_EXISTS
	 *
	 * @param authorName
	 */
	public static BigDecimal fAuthorExists(Connection connection, String authorName) throws SQLException {
		FAuthorExists f = new FAuthorExists();
		f.setAuthorName(authorName);

		f.execute(connection);
		return f.getReturnValue();
	}

	/**
	 * Get F_AUTHOR_EXISTS as a field
	 *
	 * @param authorName
	 */
	public static Field<BigDecimal> fAuthorExists(String authorName) {
		FAuthorExists f = new FAuthorExists();
		f.setAuthorName(authorName);

		return f.asField();
	}

	/**
	 * Get F_AUTHOR_EXISTS as a field
	 *
	 * @param authorName
	 */
	public static Field<BigDecimal> fAuthorExists(Field<String> authorName) {
		FAuthorExists f = new FAuthorExists();
		f.setAuthorName(authorName);

		return f.asField();
	}

	/**
	 * Invoke F_NUMBER
	 *
	 * @param n
	 */
	public static BigDecimal fNumber(Connection connection, Number n) throws SQLException {
		FNumber f = new FNumber();
		f.setN(n);

		f.execute(connection);
		return f.getReturnValue();
	}

	/**
	 * Get F_NUMBER as a field
	 *
	 * @param n
	 */
	public static Field<BigDecimal> fNumber(Number n) {
		FNumber f = new FNumber();
		f.setN(n);

		return f.asField();
	}

	/**
	 * Get F_NUMBER as a field
	 *
	 * @param n
	 */
	public static Field<BigDecimal> fNumber(Field<? extends Number> n) {
		FNumber f = new FNumber();
		f.setN(n);

		return f.asField();
	}

	/**
	 * Invoke F_ONE
	 *
	 */
	public static BigDecimal fOne(Connection connection) throws SQLException {
		FOne f = new FOne();

		f.execute(connection);
		return f.getReturnValue();
	}

	/**
	 * Get F_ONE as a field
	 *
	 */
	public static Field<BigDecimal> fOne() {
		FOne f = new FOne();

		return f.asField();
	}

	/**
	 * Invoke F317
	 *
	 * @param p1
	 * @param p2
	 * @param p3
	 * @param p4
	 */
	public static BigDecimal f317(Connection connection, Number p1, Number p2, Number p3, Number p4) throws SQLException {
		F317 f = new F317();
		f.setP1(p1);
		f.setP2(p2);
		f.setP3(p3);
		f.setP4(p4);

		f.execute(connection);
		return f.getReturnValue();
	}

	/**
	 * Get F317 as a field
	 *
	 * @param p1
	 * @param p2
	 * @param p3
	 * @param p4
	 */
	public static Field<BigDecimal> f317(Number p1, Number p2, Number p3, Number p4) {
		F317 f = new F317();
		f.setP1(p1);
		f.setP2(p2);
		f.setP3(p3);
		f.setP4(p4);

		return f.asField();
	}

	/**
	 * Get F317 as a field
	 *
	 * @param p1
	 * @param p2
	 * @param p3
	 * @param p4
	 */
	public static Field<BigDecimal> f317(Field<? extends Number> p1, Field<? extends Number> p2, Field<? extends Number> p3, Field<? extends Number> p4) {
		F317 f = new F317();
		f.setP1(p1);
		f.setP2(p2);
		f.setP3(p3);
		f.setP4(p4);

		return f.asField();
	}

	/**
	 * Invoke F377
	 *
	 */
	public static Object f377(Connection connection) throws SQLException {
		F377 f = new F377();

		f.execute(connection);
		return f.getReturnValue();
	}

	/**
	 * Get F377 as a field
	 *
	 */
	public static Field<Object> f377() {
		F377 f = new F377();

		return f.asField();
	}

	/**
	 * No instances
	 */
	private Functions() {}
}
