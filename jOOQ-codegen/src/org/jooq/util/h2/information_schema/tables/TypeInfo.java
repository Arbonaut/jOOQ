/**
 * This class is generated by jOOQ
 */
package org.jooq.util.h2.information_schema.tables;


import javax.annotation.Generated;

import org.jooq.SQLDialect;
import org.jooq.TableField;
import org.jooq.impl.TableFieldImpl;
import org.jooq.impl.TableImpl;
import org.jooq.util.h2.H2DataType;
import org.jooq.util.h2.information_schema.InformationSchema;
import org.jooq.util.h2.information_schema.tables.records.TypeInfoRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(value    = "http://jooq.sourceforge.net",
           comments = "This class is generated by jOOQ")
public class TypeInfo extends TableImpl<TypeInfoRecord> {

	private static final long serialVersionUID = -1890279445;

	/**
	 * The singleton instance of TYPE_INFO
	 */
	public static final TypeInfo TYPE_INFO = new TypeInfo();

	/**
	 * The class holding records for this type
	 */
	private static final Class<TypeInfoRecord> __RECORD_TYPE = TypeInfoRecord.class;

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TypeInfoRecord> getRecordType() {
		return __RECORD_TYPE;
	}

	/**
	 * An uncommented item
	 */
	public static final TableField<TypeInfoRecord, String> TYPE_NAME = new TableFieldImpl<TypeInfoRecord, String>(SQLDialect.H2, "TYPE_NAME", H2DataType.VARCHAR, TYPE_INFO);

	/**
	 * An uncommented item
	 */
	public static final TableField<TypeInfoRecord, Integer> DATA_TYPE = new TableFieldImpl<TypeInfoRecord, Integer>(SQLDialect.H2, "DATA_TYPE", H2DataType.INTEGER, TYPE_INFO);

	/**
	 * An uncommented item
	 */
	public static final TableField<TypeInfoRecord, Integer> PRECISION = new TableFieldImpl<TypeInfoRecord, Integer>(SQLDialect.H2, "PRECISION", H2DataType.INTEGER, TYPE_INFO);

	/**
	 * An uncommented item
	 */
	public static final TableField<TypeInfoRecord, String> PREFIX = new TableFieldImpl<TypeInfoRecord, String>(SQLDialect.H2, "PREFIX", H2DataType.VARCHAR, TYPE_INFO);

	/**
	 * An uncommented item
	 */
	public static final TableField<TypeInfoRecord, String> SUFFIX = new TableFieldImpl<TypeInfoRecord, String>(SQLDialect.H2, "SUFFIX", H2DataType.VARCHAR, TYPE_INFO);

	/**
	 * An uncommented item
	 */
	public static final TableField<TypeInfoRecord, String> PARAMS = new TableFieldImpl<TypeInfoRecord, String>(SQLDialect.H2, "PARAMS", H2DataType.VARCHAR, TYPE_INFO);

	/**
	 * An uncommented item
	 */
	public static final TableField<TypeInfoRecord, Boolean> AUTO_INCREMENT = new TableFieldImpl<TypeInfoRecord, Boolean>(SQLDialect.H2, "AUTO_INCREMENT", H2DataType.BOOLEAN, TYPE_INFO);

	/**
	 * An uncommented item
	 */
	public static final TableField<TypeInfoRecord, Short> MINIMUM_SCALE = new TableFieldImpl<TypeInfoRecord, Short>(SQLDialect.H2, "MINIMUM_SCALE", H2DataType.SMALLINT, TYPE_INFO);

	/**
	 * An uncommented item
	 */
	public static final TableField<TypeInfoRecord, Short> MAXIMUM_SCALE = new TableFieldImpl<TypeInfoRecord, Short>(SQLDialect.H2, "MAXIMUM_SCALE", H2DataType.SMALLINT, TYPE_INFO);

	/**
	 * An uncommented item
	 */
	public static final TableField<TypeInfoRecord, Integer> RADIX = new TableFieldImpl<TypeInfoRecord, Integer>(SQLDialect.H2, "RADIX", H2DataType.INTEGER, TYPE_INFO);

	/**
	 * An uncommented item
	 */
	public static final TableField<TypeInfoRecord, Integer> POS = new TableFieldImpl<TypeInfoRecord, Integer>(SQLDialect.H2, "POS", H2DataType.INTEGER, TYPE_INFO);

	/**
	 * An uncommented item
	 */
	public static final TableField<TypeInfoRecord, Boolean> CASE_SENSITIVE = new TableFieldImpl<TypeInfoRecord, Boolean>(SQLDialect.H2, "CASE_SENSITIVE", H2DataType.BOOLEAN, TYPE_INFO);

	/**
	 * An uncommented item
	 */
	public static final TableField<TypeInfoRecord, Short> NULLABLE = new TableFieldImpl<TypeInfoRecord, Short>(SQLDialect.H2, "NULLABLE", H2DataType.SMALLINT, TYPE_INFO);

	/**
	 * An uncommented item
	 */
	public static final TableField<TypeInfoRecord, Short> SEARCHABLE = new TableFieldImpl<TypeInfoRecord, Short>(SQLDialect.H2, "SEARCHABLE", H2DataType.SMALLINT, TYPE_INFO);

	/**
	 * No further instances allowed
	 */
	private TypeInfo() {
		super(SQLDialect.H2, "TYPE_INFO", InformationSchema.INFORMATION_SCHEMA);
	}
}
