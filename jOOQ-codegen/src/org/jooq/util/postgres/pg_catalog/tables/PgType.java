/**
 * This class is generated by jOOQ
 */
package org.jooq.util.postgres.pg_catalog.tables;


import javax.annotation.Generated;

import org.jooq.SQLDialect;
import org.jooq.TableField;
import org.jooq.impl.TableFieldImpl;
import org.jooq.impl.TableImpl;
import org.jooq.util.postgres.PostgresDataType;
import org.jooq.util.postgres.pg_catalog.PgCatalog;
import org.jooq.util.postgres.pg_catalog.tables.records.PgTypeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(value    = "http://jooq.sourceforge.net",
           comments = "This class is generated by jOOQ")
public class PgType extends TableImpl<PgTypeRecord> {

	private static final long serialVersionUID = 1678473418;

	/**
	 * The singleton instance of pg_type
	 */
	public static final PgType PG_TYPE = new PgType();

	/**
	 * The class holding records for this type
	 */
	private static final Class<PgTypeRecord> __RECORD_TYPE = PgTypeRecord.class;

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<PgTypeRecord> getRecordType() {
		return __RECORD_TYPE;
	}

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPNAME = new TableFieldImpl<PgTypeRecord, String>(SQLDialect.POSTGRES, "typname", PostgresDataType.NAME, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, Long> TYPNAMESPACE = new TableFieldImpl<PgTypeRecord, Long>(SQLDialect.POSTGRES, "typnamespace", PostgresDataType.OID, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, Long> TYPOWNER = new TableFieldImpl<PgTypeRecord, Long>(SQLDialect.POSTGRES, "typowner", PostgresDataType.OID, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, Short> TYPLEN = new TableFieldImpl<PgTypeRecord, Short>(SQLDialect.POSTGRES, "typlen", PostgresDataType.SMALLINT, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, Boolean> TYPBYVAL = new TableFieldImpl<PgTypeRecord, Boolean>(SQLDialect.POSTGRES, "typbyval", PostgresDataType.BOOLEAN, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPTYPE = new TableFieldImpl<PgTypeRecord, String>(SQLDialect.POSTGRES, "typtype", PostgresDataType.CHAR, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPCATEGORY = new TableFieldImpl<PgTypeRecord, String>(SQLDialect.POSTGRES, "typcategory", PostgresDataType.CHAR, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, Boolean> TYPISPREFERRED = new TableFieldImpl<PgTypeRecord, Boolean>(SQLDialect.POSTGRES, "typispreferred", PostgresDataType.BOOLEAN, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, Boolean> TYPISDEFINED = new TableFieldImpl<PgTypeRecord, Boolean>(SQLDialect.POSTGRES, "typisdefined", PostgresDataType.BOOLEAN, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPDELIM = new TableFieldImpl<PgTypeRecord, String>(SQLDialect.POSTGRES, "typdelim", PostgresDataType.CHAR, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, Long> TYPRELID = new TableFieldImpl<PgTypeRecord, Long>(SQLDialect.POSTGRES, "typrelid", PostgresDataType.OID, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, Long> TYPELEM = new TableFieldImpl<PgTypeRecord, Long>(SQLDialect.POSTGRES, "typelem", PostgresDataType.OID, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, Long> TYPARRAY = new TableFieldImpl<PgTypeRecord, Long>(SQLDialect.POSTGRES, "typarray", PostgresDataType.OID, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPINPUT = new TableFieldImpl<PgTypeRecord, String>(SQLDialect.POSTGRES, "typinput", PostgresDataType.REGPROC, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPOUTPUT = new TableFieldImpl<PgTypeRecord, String>(SQLDialect.POSTGRES, "typoutput", PostgresDataType.REGPROC, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPRECEIVE = new TableFieldImpl<PgTypeRecord, String>(SQLDialect.POSTGRES, "typreceive", PostgresDataType.REGPROC, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPSEND = new TableFieldImpl<PgTypeRecord, String>(SQLDialect.POSTGRES, "typsend", PostgresDataType.REGPROC, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPMODIN = new TableFieldImpl<PgTypeRecord, String>(SQLDialect.POSTGRES, "typmodin", PostgresDataType.REGPROC, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPMODOUT = new TableFieldImpl<PgTypeRecord, String>(SQLDialect.POSTGRES, "typmodout", PostgresDataType.REGPROC, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPANALYZE = new TableFieldImpl<PgTypeRecord, String>(SQLDialect.POSTGRES, "typanalyze", PostgresDataType.REGPROC, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPALIGN = new TableFieldImpl<PgTypeRecord, String>(SQLDialect.POSTGRES, "typalign", PostgresDataType.CHAR, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPSTORAGE = new TableFieldImpl<PgTypeRecord, String>(SQLDialect.POSTGRES, "typstorage", PostgresDataType.CHAR, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, Boolean> TYPNOTNULL = new TableFieldImpl<PgTypeRecord, Boolean>(SQLDialect.POSTGRES, "typnotnull", PostgresDataType.BOOLEAN, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, Long> TYPBASETYPE = new TableFieldImpl<PgTypeRecord, Long>(SQLDialect.POSTGRES, "typbasetype", PostgresDataType.OID, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, Integer> TYPTYPMOD = new TableFieldImpl<PgTypeRecord, Integer>(SQLDialect.POSTGRES, "typtypmod", PostgresDataType.INTEGER, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, Integer> TYPNDIMS = new TableFieldImpl<PgTypeRecord, Integer>(SQLDialect.POSTGRES, "typndims", PostgresDataType.INTEGER, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPDEFAULTBIN = new TableFieldImpl<PgTypeRecord, String>(SQLDialect.POSTGRES, "typdefaultbin", PostgresDataType.TEXT, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPDEFAULT = new TableFieldImpl<PgTypeRecord, String>(SQLDialect.POSTGRES, "typdefault", PostgresDataType.TEXT, PG_TYPE);

	/**
	 * No further instances allowed
	 */
	private PgType() {
		super(SQLDialect.POSTGRES, "pg_type", PgCatalog.PG_CATALOG);
	}
}
