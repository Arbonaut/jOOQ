/**
 * This class is generated by jOOQ
 */
package org.jooq.util.oracle.sys.tables.records;


import java.math.BigDecimal;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.TableRecordImpl;
import org.jooq.util.oracle.sys.tables.AllCollTypes;


/**
 * This class is generated by jOOQ.
 *
 * Description of named collection types accessible to the user
 */
@Generated(value    = "http://jooq.sourceforge.net",
           comments = "This class is generated by jOOQ")
public class AllCollTypesRecord extends TableRecordImpl<AllCollTypesRecord> {

	private static final long serialVersionUID = -1895197730;

	/**
	 * Owner of the type
	 */
	public void setOwner(String value) {
		setValue(AllCollTypes.OWNER, value);
	}

	/**
	 * Owner of the type
	 */
	public String getOwner() {
		return getValue(AllCollTypes.OWNER);
	}

	/**
	 * Name of the type
	 */
	public void setTypeName(String value) {
		setValue(AllCollTypes.TYPE_NAME, value);
	}

	/**
	 * Name of the type
	 */
	public String getTypeName() {
		return getValue(AllCollTypes.TYPE_NAME);
	}

	/**
	 * Collection type
	 */
	public void setCollType(String value) {
		setValue(AllCollTypes.COLL_TYPE, value);
	}

	/**
	 * Collection type
	 */
	public String getCollType() {
		return getValue(AllCollTypes.COLL_TYPE);
	}

	/**
	 * Size of the FIXED ARRAY type or maximum size of the VARYING ARRAY type
	 */
	public void setUpperBound(BigDecimal value) {
		setValue(AllCollTypes.UPPER_BOUND, value);
	}

	/**
	 * Size of the FIXED ARRAY type or maximum size of the VARYING ARRAY type
	 */
	public BigDecimal getUpperBound() {
		return getValue(AllCollTypes.UPPER_BOUND);
	}

	/**
	 * Type modifier of the element
	 */
	public void setElemTypeMod(String value) {
		setValue(AllCollTypes.ELEM_TYPE_MOD, value);
	}

	/**
	 * Type modifier of the element
	 */
	public String getElemTypeMod() {
		return getValue(AllCollTypes.ELEM_TYPE_MOD);
	}

	/**
	 * Owner of the type of the element
	 */
	public void setElemTypeOwner(String value) {
		setValue(AllCollTypes.ELEM_TYPE_OWNER, value);
	}

	/**
	 * Owner of the type of the element
	 */
	public String getElemTypeOwner() {
		return getValue(AllCollTypes.ELEM_TYPE_OWNER);
	}

	/**
	 * Name of the type of the element
	 */
	public void setElemTypeName(String value) {
		setValue(AllCollTypes.ELEM_TYPE_NAME, value);
	}

	/**
	 * Name of the type of the element
	 */
	public String getElemTypeName() {
		return getValue(AllCollTypes.ELEM_TYPE_NAME);
	}

	/**
	 * Length of the CHAR element or maximum length of the VARCHAR
or VARCHAR2 element
	 */
	public void setLength(BigDecimal value) {
		setValue(AllCollTypes.LENGTH, value);
	}

	/**
	 * Length of the CHAR element or maximum length of the VARCHAR
or VARCHAR2 element
	 */
	public BigDecimal getLength() {
		return getValue(AllCollTypes.LENGTH);
	}

	/**
	 * Decimal precision of the NUMBER or DECIMAL element or
binary precision of the FLOAT element
	 */
	public void setPrecision(BigDecimal value) {
		setValue(AllCollTypes.PRECISION, value);
	}

	/**
	 * Decimal precision of the NUMBER or DECIMAL element or
binary precision of the FLOAT element
	 */
	public BigDecimal getPrecision() {
		return getValue(AllCollTypes.PRECISION);
	}

	/**
	 * Scale of the NUMBER or DECIMAL element
	 */
	public void setScale(BigDecimal value) {
		setValue(AllCollTypes.SCALE, value);
	}

	/**
	 * Scale of the NUMBER or DECIMAL element
	 */
	public BigDecimal getScale() {
		return getValue(AllCollTypes.SCALE);
	}

	/**
	 * Character set name of the element
	 */
	public void setCharacterSetName(String value) {
		setValue(AllCollTypes.CHARACTER_SET_NAME, value);
	}

	/**
	 * Character set name of the element
	 */
	public String getCharacterSetName() {
		return getValue(AllCollTypes.CHARACTER_SET_NAME);
	}

	/**
	 * Storage optimization specification for VARRAY of numeric elements
	 */
	public void setElemStorage(String value) {
		setValue(AllCollTypes.ELEM_STORAGE, value);
	}

	/**
	 * Storage optimization specification for VARRAY of numeric elements
	 */
	public String getElemStorage() {
		return getValue(AllCollTypes.ELEM_STORAGE);
	}

	/**
	 * Is null information stored with each VARRAY element?
	 */
	public void setNullsStored(String value) {
		setValue(AllCollTypes.NULLS_STORED, value);
	}

	/**
	 * Is null information stored with each VARRAY element?
	 */
	public String getNullsStored() {
		return getValue(AllCollTypes.NULLS_STORED);
	}

	public AllCollTypesRecord(Configuration configuration) {
		super(configuration, AllCollTypes.ALL_COLL_TYPES);
	}
}
