/**
 * This class is generated by jOOQ
 */
package org.jooq.util.oracle.sys.tables;


import java.sql.Date;

import javax.annotation.Generated;

import org.jooq.SQLDialect;
import org.jooq.TableField;
import org.jooq.impl.TableFieldImpl;
import org.jooq.impl.TableImpl;
import org.jooq.util.oracle.OracleDataType;
import org.jooq.util.oracle.sys.Sys;
import org.jooq.util.oracle.sys.tables.records.AllConstraintsRecord;


/**
 * This class is generated by jOOQ.
 *
 * Constraint definitions on accessible tables
 */
@Generated(value    = "http://jooq.sourceforge.net",
           comments = "This class is generated by jOOQ")
public class AllConstraints extends TableImpl<AllConstraintsRecord> {

	private static final long serialVersionUID = -977851659;

	/**
	 * The singleton instance of ALL_CONSTRAINTS
	 */
	public static final AllConstraints ALL_CONSTRAINTS = new AllConstraints();

	/**
	 * The class holding records for this type
	 */
	private static final Class<AllConstraintsRecord> __RECORD_TYPE = AllConstraintsRecord.class;

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AllConstraintsRecord> getRecordType() {
		return __RECORD_TYPE;
	}

	/**
	 * Owner of the table
	 */
	public static final TableField<AllConstraintsRecord, String> OWNER = new TableFieldImpl<AllConstraintsRecord, String>(SQLDialect.ORACLE, "OWNER", OracleDataType.VARCHAR2, ALL_CONSTRAINTS);

	/**
	 * Name associated with constraint definition
	 */
	public static final TableField<AllConstraintsRecord, String> CONSTRAINT_NAME = new TableFieldImpl<AllConstraintsRecord, String>(SQLDialect.ORACLE, "CONSTRAINT_NAME", OracleDataType.VARCHAR2, ALL_CONSTRAINTS);

	/**
	 * Type of constraint definition
	 */
	public static final TableField<AllConstraintsRecord, String> CONSTRAINT_TYPE = new TableFieldImpl<AllConstraintsRecord, String>(SQLDialect.ORACLE, "CONSTRAINT_TYPE", OracleDataType.VARCHAR2, ALL_CONSTRAINTS);

	/**
	 * Name associated with table with constraint definition
	 */
	public static final TableField<AllConstraintsRecord, String> TABLE_NAME = new TableFieldImpl<AllConstraintsRecord, String>(SQLDialect.ORACLE, "TABLE_NAME", OracleDataType.VARCHAR2, ALL_CONSTRAINTS);

	/**
	 * Text of search condition for table check
	 */
	public static final TableField<AllConstraintsRecord, String> SEARCH_CONDITION = new TableFieldImpl<AllConstraintsRecord, String>(SQLDialect.ORACLE, "SEARCH_CONDITION", OracleDataType.LONG, ALL_CONSTRAINTS);

	/**
	 * Owner of table used in referential constraint
	 */
	public static final TableField<AllConstraintsRecord, String> R_OWNER = new TableFieldImpl<AllConstraintsRecord, String>(SQLDialect.ORACLE, "R_OWNER", OracleDataType.VARCHAR2, ALL_CONSTRAINTS);

	/**
	 * Name of unique constraint definition for referenced table
	 */
	public static final TableField<AllConstraintsRecord, String> R_CONSTRAINT_NAME = new TableFieldImpl<AllConstraintsRecord, String>(SQLDialect.ORACLE, "R_CONSTRAINT_NAME", OracleDataType.VARCHAR2, ALL_CONSTRAINTS);

	/**
	 * The delete rule for a referential constraint
	 */
	public static final TableField<AllConstraintsRecord, String> DELETE_RULE = new TableFieldImpl<AllConstraintsRecord, String>(SQLDialect.ORACLE, "DELETE_RULE", OracleDataType.VARCHAR2, ALL_CONSTRAINTS);

	/**
	 * Enforcement status of constraint - ENABLED or DISABLED
	 */
	public static final TableField<AllConstraintsRecord, String> STATUS = new TableFieldImpl<AllConstraintsRecord, String>(SQLDialect.ORACLE, "STATUS", OracleDataType.VARCHAR2, ALL_CONSTRAINTS);

	/**
	 * Is the constraint deferrable - DEFERRABLE or NOT DEFERRABLE
	 */
	public static final TableField<AllConstraintsRecord, String> DEFERRABLE = new TableFieldImpl<AllConstraintsRecord, String>(SQLDialect.ORACLE, "DEFERRABLE", OracleDataType.VARCHAR2, ALL_CONSTRAINTS);

	/**
	 * Is the constraint deferred by default -  DEFERRED or IMMEDIATE
	 */
	public static final TableField<AllConstraintsRecord, String> DEFERRED = new TableFieldImpl<AllConstraintsRecord, String>(SQLDialect.ORACLE, "DEFERRED", OracleDataType.VARCHAR2, ALL_CONSTRAINTS);

	/**
	 * Was this constraint system validated? -  VALIDATED or NOT VALIDATED
	 */
	public static final TableField<AllConstraintsRecord, String> VALIDATED = new TableFieldImpl<AllConstraintsRecord, String>(SQLDialect.ORACLE, "VALIDATED", OracleDataType.VARCHAR2, ALL_CONSTRAINTS);

	/**
	 * Was the constraint name system generated? -  GENERATED NAME or USER NAME
	 */
	public static final TableField<AllConstraintsRecord, String> GENERATED = new TableFieldImpl<AllConstraintsRecord, String>(SQLDialect.ORACLE, "GENERATED", OracleDataType.VARCHAR2, ALL_CONSTRAINTS);

	/**
	 * Creating this constraint should give ORA-02436.  Rewrite it before 2000 AD.
	 */
	public static final TableField<AllConstraintsRecord, String> BAD = new TableFieldImpl<AllConstraintsRecord, String>(SQLDialect.ORACLE, "BAD", OracleDataType.VARCHAR2, ALL_CONSTRAINTS);

	/**
	 * If set, this flag will be used in optimizer
	 */
	public static final TableField<AllConstraintsRecord, String> RELY = new TableFieldImpl<AllConstraintsRecord, String>(SQLDialect.ORACLE, "RELY", OracleDataType.VARCHAR2, ALL_CONSTRAINTS);

	/**
	 * The date when this column was last enabled or disabled
	 */
	public static final TableField<AllConstraintsRecord, Date> LAST_CHANGE = new TableFieldImpl<AllConstraintsRecord, Date>(SQLDialect.ORACLE, "LAST_CHANGE", OracleDataType.DATE, ALL_CONSTRAINTS);

	/**
	 * The owner of the index used by this constraint
	 */
	public static final TableField<AllConstraintsRecord, String> INDEX_OWNER = new TableFieldImpl<AllConstraintsRecord, String>(SQLDialect.ORACLE, "INDEX_OWNER", OracleDataType.VARCHAR2, ALL_CONSTRAINTS);

	/**
	 * The index used by this constraint
	 */
	public static final TableField<AllConstraintsRecord, String> INDEX_NAME = new TableFieldImpl<AllConstraintsRecord, String>(SQLDialect.ORACLE, "INDEX_NAME", OracleDataType.VARCHAR2, ALL_CONSTRAINTS);

	/**
	 * An uncommented item
	 */
	public static final TableField<AllConstraintsRecord, String> INVALID = new TableFieldImpl<AllConstraintsRecord, String>(SQLDialect.ORACLE, "INVALID", OracleDataType.VARCHAR2, ALL_CONSTRAINTS);

	/**
	 * An uncommented item
	 */
	public static final TableField<AllConstraintsRecord, String> VIEW_RELATED = new TableFieldImpl<AllConstraintsRecord, String>(SQLDialect.ORACLE, "VIEW_RELATED", OracleDataType.VARCHAR2, ALL_CONSTRAINTS);

	/**
	 * No further instances allowed
	 */
	private AllConstraints() {
		super(SQLDialect.ORACLE, "ALL_CONSTRAINTS", Sys.SYS);
	}
}
