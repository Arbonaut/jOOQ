/**
 * This class is generated by jOOQ
 */
package org.jooq.util.postgres.pg_catalog.tables;


import javax.annotation.Generated;

import org.jooq.TableField;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableFieldImpl;
import org.jooq.impl.TableImpl;
import org.jooq.util.postgres.pg_catalog.PgCatalog;
import org.jooq.util.postgres.pg_catalog.tables.records.PgTypeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(value    = "http://jooq.sourceforge.net",
           comments = "This class is generated by jOOQ")
public class PgType extends TableImpl<PgTypeRecord> {

	private static final long serialVersionUID = 591726073;

	/**
	 * The singleton instance of pg_type
	 */
	public static final PgType PG_TYPE = new PgType();

	/**
	 * The class holding records for this type
	 */
	private static final Class<PgTypeRecord> __RECORD_TYPE = PgTypeRecord.class;

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<PgTypeRecord> getRecordType() {
		return __RECORD_TYPE;
	}

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPNAME = new TableFieldImpl<PgTypeRecord, String>("typname", SQLDataType.VARCHAR, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, Long> TYPNAMESPACE = new TableFieldImpl<PgTypeRecord, Long>("typnamespace", SQLDataType.BIGINT, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, Long> TYPOWNER = new TableFieldImpl<PgTypeRecord, Long>("typowner", SQLDataType.BIGINT, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, Short> TYPLEN = new TableFieldImpl<PgTypeRecord, Short>("typlen", SQLDataType.SMALLINT, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, Boolean> TYPBYVAL = new TableFieldImpl<PgTypeRecord, Boolean>("typbyval", SQLDataType.BOOLEAN, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPTYPE = new TableFieldImpl<PgTypeRecord, String>("typtype", SQLDataType.CHAR, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPCATEGORY = new TableFieldImpl<PgTypeRecord, String>("typcategory", SQLDataType.CHAR, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, Boolean> TYPISPREFERRED = new TableFieldImpl<PgTypeRecord, Boolean>("typispreferred", SQLDataType.BOOLEAN, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, Boolean> TYPISDEFINED = new TableFieldImpl<PgTypeRecord, Boolean>("typisdefined", SQLDataType.BOOLEAN, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPDELIM = new TableFieldImpl<PgTypeRecord, String>("typdelim", SQLDataType.CHAR, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, Long> TYPRELID = new TableFieldImpl<PgTypeRecord, Long>("typrelid", SQLDataType.BIGINT, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, Long> TYPELEM = new TableFieldImpl<PgTypeRecord, Long>("typelem", SQLDataType.BIGINT, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, Long> TYPARRAY = new TableFieldImpl<PgTypeRecord, Long>("typarray", SQLDataType.BIGINT, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPINPUT = new TableFieldImpl<PgTypeRecord, String>("typinput", SQLDataType.VARCHAR, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPOUTPUT = new TableFieldImpl<PgTypeRecord, String>("typoutput", SQLDataType.VARCHAR, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPRECEIVE = new TableFieldImpl<PgTypeRecord, String>("typreceive", SQLDataType.VARCHAR, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPSEND = new TableFieldImpl<PgTypeRecord, String>("typsend", SQLDataType.VARCHAR, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPMODIN = new TableFieldImpl<PgTypeRecord, String>("typmodin", SQLDataType.VARCHAR, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPMODOUT = new TableFieldImpl<PgTypeRecord, String>("typmodout", SQLDataType.VARCHAR, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPANALYZE = new TableFieldImpl<PgTypeRecord, String>("typanalyze", SQLDataType.VARCHAR, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPALIGN = new TableFieldImpl<PgTypeRecord, String>("typalign", SQLDataType.CHAR, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPSTORAGE = new TableFieldImpl<PgTypeRecord, String>("typstorage", SQLDataType.CHAR, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, Boolean> TYPNOTNULL = new TableFieldImpl<PgTypeRecord, Boolean>("typnotnull", SQLDataType.BOOLEAN, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, Long> TYPBASETYPE = new TableFieldImpl<PgTypeRecord, Long>("typbasetype", SQLDataType.BIGINT, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, Integer> TYPTYPMOD = new TableFieldImpl<PgTypeRecord, Integer>("typtypmod", SQLDataType.INTEGER, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, Integer> TYPNDIMS = new TableFieldImpl<PgTypeRecord, Integer>("typndims", SQLDataType.INTEGER, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPDEFAULTBIN = new TableFieldImpl<PgTypeRecord, String>("typdefaultbin", SQLDataType.CLOB, PG_TYPE);

	/**
	 * An uncommented item
	 */
	public static final TableField<PgTypeRecord, String> TYPDEFAULT = new TableFieldImpl<PgTypeRecord, String>("typdefault", SQLDataType.CLOB, PG_TYPE);

	/**
	 * No further instances allowed
	 */
	private PgType() {
		super("pg_type", PgCatalog.PG_CATALOG);
	}
}
