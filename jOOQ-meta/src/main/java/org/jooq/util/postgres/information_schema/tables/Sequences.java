/**
 * This class is generated by jOOQ
 */
package org.jooq.util.postgres.information_schema.tables;


import javax.annotation.Generated;

import org.jooq.TableField;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableFieldImpl;
import org.jooq.impl.TableImpl;
import org.jooq.util.postgres.information_schema.InformationSchema;
import org.jooq.util.postgres.information_schema.tables.records.SequencesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(value    = "http://jooq.sourceforge.net",
           comments = "This class is generated by jOOQ")
public class Sequences extends TableImpl<SequencesRecord> {

	private static final long serialVersionUID = -748029624;

	/**
	 * The singleton instance of sequences
	 */
	public static final Sequences SEQUENCES = new Sequences();

	/**
	 * The class holding records for this type
	 */
	private static final Class<SequencesRecord> __RECORD_TYPE = SequencesRecord.class;

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<SequencesRecord> getRecordType() {
		return __RECORD_TYPE;
	}

	/**
	 * An uncommented item
	 */
	public static final TableField<SequencesRecord, String> SEQUENCE_CATALOG = new TableFieldImpl<SequencesRecord, String>("sequence_catalog", SQLDataType.VARCHAR, SEQUENCES);

	/**
	 * An uncommented item
	 */
	public static final TableField<SequencesRecord, String> SEQUENCE_SCHEMA = new TableFieldImpl<SequencesRecord, String>("sequence_schema", SQLDataType.VARCHAR, SEQUENCES);

	/**
	 * An uncommented item
	 */
	public static final TableField<SequencesRecord, String> SEQUENCE_NAME = new TableFieldImpl<SequencesRecord, String>("sequence_name", SQLDataType.VARCHAR, SEQUENCES);

	/**
	 * An uncommented item
	 */
	public static final TableField<SequencesRecord, String> DATA_TYPE = new TableFieldImpl<SequencesRecord, String>("data_type", SQLDataType.VARCHAR, SEQUENCES);

	/**
	 * An uncommented item
	 */
	public static final TableField<SequencesRecord, Integer> NUMERIC_PRECISION = new TableFieldImpl<SequencesRecord, Integer>("numeric_precision", SQLDataType.INTEGER, SEQUENCES);

	/**
	 * An uncommented item
	 */
	public static final TableField<SequencesRecord, Integer> NUMERIC_PRECISION_RADIX = new TableFieldImpl<SequencesRecord, Integer>("numeric_precision_radix", SQLDataType.INTEGER, SEQUENCES);

	/**
	 * An uncommented item
	 */
	public static final TableField<SequencesRecord, Integer> NUMERIC_SCALE = new TableFieldImpl<SequencesRecord, Integer>("numeric_scale", SQLDataType.INTEGER, SEQUENCES);

	/**
	 * An uncommented item
	 */
	public static final TableField<SequencesRecord, Integer> MAXIMUM_VALUE = new TableFieldImpl<SequencesRecord, Integer>("maximum_value", SQLDataType.INTEGER, SEQUENCES);

	/**
	 * An uncommented item
	 */
	public static final TableField<SequencesRecord, Integer> MINIMUM_VALUE = new TableFieldImpl<SequencesRecord, Integer>("minimum_value", SQLDataType.INTEGER, SEQUENCES);

	/**
	 * An uncommented item
	 */
	public static final TableField<SequencesRecord, Integer> INCREMENT = new TableFieldImpl<SequencesRecord, Integer>("increment", SQLDataType.INTEGER, SEQUENCES);

	/**
	 * An uncommented item
	 */
	public static final TableField<SequencesRecord, String> CYCLE_OPTION = new TableFieldImpl<SequencesRecord, String>("cycle_option", SQLDataType.VARCHAR, SEQUENCES);

	/**
	 * No further instances allowed
	 */
	private Sequences() {
		super("sequences", InformationSchema.INFORMATION_SCHEMA);
	}
}
