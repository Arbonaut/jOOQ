/**
 * This class is generated by jOOQ
 */
package org.jooq.util.ansi.information_schema.tables;


import javax.annotation.Generated;

import org.jooq.TableField;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableFieldImpl;
import org.jooq.impl.TableImpl;
import org.jooq.util.ansi.information_schema.InformationSchema;
import org.jooq.util.ansi.information_schema.tables.records.TableConstraintsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(value    = "http://jooq.sourceforge.net",
           comments = "This class is generated by jOOQ")
public class TableConstraints extends TableImpl<TableConstraintsRecord> {

	private static final long serialVersionUID = 531941610;

	/**
	 * The singleton instance of TABLE_CONSTRAINTS
	 */
	public static final TableConstraints TABLE_CONSTRAINTS = new TableConstraints();

	/**
	 * The class holding records for this type
	 */
	private static final Class<TableConstraintsRecord> __RECORD_TYPE = TableConstraintsRecord.class;

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TableConstraintsRecord> getRecordType() {
		return __RECORD_TYPE;
	}

	/**
	 * An uncommented item
	 */
	public static final TableField<TableConstraintsRecord, String> CONSTRAINT_CATALOG = new TableFieldImpl<TableConstraintsRecord, String>("CONSTRAINT_CATALOG", SQLDataType.VARCHAR, TABLE_CONSTRAINTS);

	/**
	 * An uncommented item
	 */
	public static final TableField<TableConstraintsRecord, String> CONSTRAINT_SCHEMA = new TableFieldImpl<TableConstraintsRecord, String>("CONSTRAINT_SCHEMA", SQLDataType.VARCHAR, TABLE_CONSTRAINTS);

	/**
	 * An uncommented item
	 */
	public static final TableField<TableConstraintsRecord, String> CONSTRAINT_NAME = new TableFieldImpl<TableConstraintsRecord, String>("CONSTRAINT_NAME", SQLDataType.VARCHAR, TABLE_CONSTRAINTS);

	/**
	 * An uncommented item
	 */
	public static final TableField<TableConstraintsRecord, String> CONSTRAINT_TYPE = new TableFieldImpl<TableConstraintsRecord, String>("CONSTRAINT_TYPE", SQLDataType.VARCHAR, TABLE_CONSTRAINTS);

	/**
	 * An uncommented item
	 */
	public static final TableField<TableConstraintsRecord, String> TABLE_CATALOG = new TableFieldImpl<TableConstraintsRecord, String>("TABLE_CATALOG", SQLDataType.VARCHAR, TABLE_CONSTRAINTS);

	/**
	 * An uncommented item
	 */
	public static final TableField<TableConstraintsRecord, String> TABLE_SCHEMA = new TableFieldImpl<TableConstraintsRecord, String>("TABLE_SCHEMA", SQLDataType.VARCHAR, TABLE_CONSTRAINTS);

	/**
	 * An uncommented item
	 */
	public static final TableField<TableConstraintsRecord, String> TABLE_NAME = new TableFieldImpl<TableConstraintsRecord, String>("TABLE_NAME", SQLDataType.VARCHAR, TABLE_CONSTRAINTS);

	/**
	 * An uncommented item
	 */
	public static final TableField<TableConstraintsRecord, String> IS_DEFERRABLE = new TableFieldImpl<TableConstraintsRecord, String>("IS_DEFERRABLE", SQLDataType.VARCHAR, TABLE_CONSTRAINTS);

	/**
	 * An uncommented item
	 */
	public static final TableField<TableConstraintsRecord, String> INITIALLY_DEFERRED = new TableFieldImpl<TableConstraintsRecord, String>("INITIALLY_DEFERRED", SQLDataType.VARCHAR, TABLE_CONSTRAINTS);

	/**
	 * No further instances allowed
	 */
	private TableConstraints() {
		super("TABLE_CONSTRAINTS", InformationSchema.INFORMATION_SCHEMA);
	}
}
