/**
 * This class is generated by jOOQ
 */
package org.jooq.util.h2.information_schema.tables.records;


import javax.annotation.Generated;

import org.jooq.impl.TableRecordImpl;
import org.jooq.util.h2.information_schema.tables.CrossReferences;


/**
 * This class is generated by jOOQ.
 */
@Generated(value    = "http://jooq.sourceforge.net",
           comments = "This class is generated by jOOQ")
public class CrossReferencesRecord extends TableRecordImpl<CrossReferencesRecord> {

	private static final long serialVersionUID = -1743706066;

	/**
	 * An uncommented item
	 */
	public void setPktableCatalog(String value) {
		setValue(CrossReferences.PKTABLE_CATALOG, value);
	}

	/**
	 * An uncommented item
	 */
	public String getPktableCatalog() {
		return getValue(CrossReferences.PKTABLE_CATALOG);
	}

	/**
	 * An uncommented item
	 */
	public void setPktableSchema(String value) {
		setValue(CrossReferences.PKTABLE_SCHEMA, value);
	}

	/**
	 * An uncommented item
	 */
	public String getPktableSchema() {
		return getValue(CrossReferences.PKTABLE_SCHEMA);
	}

	/**
	 * An uncommented item
	 */
	public void setPktableName(String value) {
		setValue(CrossReferences.PKTABLE_NAME, value);
	}

	/**
	 * An uncommented item
	 */
	public String getPktableName() {
		return getValue(CrossReferences.PKTABLE_NAME);
	}

	/**
	 * An uncommented item
	 */
	public void setPkcolumnName(String value) {
		setValue(CrossReferences.PKCOLUMN_NAME, value);
	}

	/**
	 * An uncommented item
	 */
	public String getPkcolumnName() {
		return getValue(CrossReferences.PKCOLUMN_NAME);
	}

	/**
	 * An uncommented item
	 */
	public void setFktableCatalog(String value) {
		setValue(CrossReferences.FKTABLE_CATALOG, value);
	}

	/**
	 * An uncommented item
	 */
	public String getFktableCatalog() {
		return getValue(CrossReferences.FKTABLE_CATALOG);
	}

	/**
	 * An uncommented item
	 */
	public void setFktableSchema(String value) {
		setValue(CrossReferences.FKTABLE_SCHEMA, value);
	}

	/**
	 * An uncommented item
	 */
	public String getFktableSchema() {
		return getValue(CrossReferences.FKTABLE_SCHEMA);
	}

	/**
	 * An uncommented item
	 */
	public void setFktableName(String value) {
		setValue(CrossReferences.FKTABLE_NAME, value);
	}

	/**
	 * An uncommented item
	 */
	public String getFktableName() {
		return getValue(CrossReferences.FKTABLE_NAME);
	}

	/**
	 * An uncommented item
	 */
	public void setFkcolumnName(String value) {
		setValue(CrossReferences.FKCOLUMN_NAME, value);
	}

	/**
	 * An uncommented item
	 */
	public String getFkcolumnName() {
		return getValue(CrossReferences.FKCOLUMN_NAME);
	}

	/**
	 * An uncommented item
	 */
	public void setOrdinalPosition(Short value) {
		setValue(CrossReferences.ORDINAL_POSITION, value);
	}

	/**
	 * An uncommented item
	 */
	public Short getOrdinalPosition() {
		return getValue(CrossReferences.ORDINAL_POSITION);
	}

	/**
	 * An uncommented item
	 */
	public void setUpdateRule(Short value) {
		setValue(CrossReferences.UPDATE_RULE, value);
	}

	/**
	 * An uncommented item
	 */
	public Short getUpdateRule() {
		return getValue(CrossReferences.UPDATE_RULE);
	}

	/**
	 * An uncommented item
	 */
	public void setDeleteRule(Short value) {
		setValue(CrossReferences.DELETE_RULE, value);
	}

	/**
	 * An uncommented item
	 */
	public Short getDeleteRule() {
		return getValue(CrossReferences.DELETE_RULE);
	}

	/**
	 * An uncommented item
	 */
	public void setFkName(String value) {
		setValue(CrossReferences.FK_NAME, value);
	}

	/**
	 * An uncommented item
	 */
	public String getFkName() {
		return getValue(CrossReferences.FK_NAME);
	}

	/**
	 * An uncommented item
	 */
	public void setPkName(String value) {
		setValue(CrossReferences.PK_NAME, value);
	}

	/**
	 * An uncommented item
	 */
	public String getPkName() {
		return getValue(CrossReferences.PK_NAME);
	}

	/**
	 * An uncommented item
	 */
	public void setDeferrability(Short value) {
		setValue(CrossReferences.DEFERRABILITY, value);
	}

	/**
	 * An uncommented item
	 */
	public Short getDeferrability() {
		return getValue(CrossReferences.DEFERRABILITY);
	}
	/**
	 * Create a detached CrossReferencesRecord
	 */
	public CrossReferencesRecord() {
		super(CrossReferences.CROSS_REFERENCES);
	}
}
