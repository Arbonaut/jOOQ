/**
 * This class is generated by jOOQ
 */
package org.jooq.util.h2.information_schema;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.SQLDialect;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;
import org.jooq.util.h2.information_schema.tables.Columns;
import org.jooq.util.h2.information_schema.tables.Constraints;
import org.jooq.util.h2.information_schema.tables.CrossReferences;
import org.jooq.util.h2.information_schema.tables.FunctionAliases;
import org.jooq.util.h2.information_schema.tables.FunctionColumns;
import org.jooq.util.h2.information_schema.tables.Sequences;
import org.jooq.util.h2.information_schema.tables.Tables;
import org.jooq.util.h2.information_schema.tables.TypeInfo;


/**
 * This class is generated by jOOQ.
 */
@Generated(value    = "http://jooq.sourceforge.net",
           comments = "This class is generated by jOOQ")
public class InformationSchema extends SchemaImpl {

	private static final long serialVersionUID = 1180798667;

	/**
	 * The singleton instance of INFORMATION_SCHEMA
	 */
	public static final InformationSchema INFORMATION_SCHEMA = new InformationSchema();

	/**
	 * No further instances allowed
	 */
	private InformationSchema() {
		super(SQLDialect.H2, "INFORMATION_SCHEMA");
	}

	@Override
	public final List<Table<?>> getTables() {
		return Arrays.<Table<?>>asList(
			FunctionColumns.FUNCTION_COLUMNS,
			Constraints.CONSTRAINTS,
			CrossReferences.CROSS_REFERENCES,
			FunctionAliases.FUNCTION_ALIASES,
			Sequences.SEQUENCES,
			TypeInfo.TYPE_INFO,
			Columns.COLUMNS,
			Tables.TABLES);
	}
}
