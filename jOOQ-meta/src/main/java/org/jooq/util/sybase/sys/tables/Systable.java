/**
 * This class is generated by jOOQ
 */
package org.jooq.util.sybase.sys.tables;


import javax.annotation.Generated;

import org.jooq.TableField;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableFieldImpl;
import org.jooq.impl.TableImpl;
import org.jooq.util.sybase.sys.Sys;
import org.jooq.util.sybase.sys.tables.records.SystableRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(value    = "http://jooq.sourceforge.net",
           comments = "This class is generated by jOOQ")
public class Systable extends TableImpl<SystableRecord> {

	private static final long serialVersionUID = 230461862;

	/**
	 * The singleton instance of SYSTABLE
	 */
	public static final Systable SYSTABLE = new Systable();

	/**
	 * The class holding records for this type
	 */
	private static final Class<SystableRecord> __RECORD_TYPE = SystableRecord.class;

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<SystableRecord> getRecordType() {
		return __RECORD_TYPE;
	}

	/**
	 * An uncommented item
	 */
	public static final TableField<SystableRecord, Integer> TABLE_ID = new TableFieldImpl<SystableRecord, Integer>("table_id", SQLDataType.INTEGER, SYSTABLE);

	/**
	 * An uncommented item
	 */
	public static final TableField<SystableRecord, Short> FILE_ID = new TableFieldImpl<SystableRecord, Short>("file_id", SQLDataType.SMALLINT, SYSTABLE);

	/**
	 * An uncommented item
	 */
	public static final TableField<SystableRecord, Long> COUNT = new TableFieldImpl<SystableRecord, Long>("count", SQLDataType.BIGINT, SYSTABLE);

	/**
	 * An uncommented item
	 */
	public static final TableField<SystableRecord, Short> FIRST_PAGE = new TableFieldImpl<SystableRecord, Short>("first_page", SQLDataType.SMALLINT, SYSTABLE);

	/**
	 * An uncommented item
	 */
	public static final TableField<SystableRecord, Integer> LAST_PAGE = new TableFieldImpl<SystableRecord, Integer>("last_page", SQLDataType.INTEGER, SYSTABLE);

	/**
	 * An uncommented item
	 */
	public static final TableField<SystableRecord, Integer> PRIMARY_ROOT = new TableFieldImpl<SystableRecord, Integer>("primary_root", SQLDataType.INTEGER, SYSTABLE);

	/**
	 * An uncommented item
	 */
	public static final TableField<SystableRecord, Integer> CREATOR = new TableFieldImpl<SystableRecord, Integer>("creator", SQLDataType.INTEGER, SYSTABLE);

	/**
	 * An uncommented item
	 */
	public static final TableField<SystableRecord, Short> FIRST_EXT_PAGE = new TableFieldImpl<SystableRecord, Short>("first_ext_page", SQLDataType.SMALLINT, SYSTABLE);

	/**
	 * An uncommented item
	 */
	public static final TableField<SystableRecord, Short> LAST_EXT_PAGE = new TableFieldImpl<SystableRecord, Short>("last_ext_page", SQLDataType.SMALLINT, SYSTABLE);

	/**
	 * An uncommented item
	 */
	public static final TableField<SystableRecord, Integer> TABLE_PAGE_COUNT = new TableFieldImpl<SystableRecord, Integer>("table_page_count", SQLDataType.INTEGER, SYSTABLE);

	/**
	 * An uncommented item
	 */
	public static final TableField<SystableRecord, Integer> EXT_PAGE_COUNT = new TableFieldImpl<SystableRecord, Integer>("ext_page_count", SQLDataType.INTEGER, SYSTABLE);

	/**
	 * An uncommented item
	 */
	public static final TableField<SystableRecord, Long> OBJECT_ID = new TableFieldImpl<SystableRecord, Long>("object_id", SQLDataType.BIGINT, SYSTABLE);

	/**
	 * An uncommented item
	 */
	public static final TableField<SystableRecord, String> TABLE_NAME = new TableFieldImpl<SystableRecord, String>("table_name", SQLDataType.CHAR, SYSTABLE);

	/**
	 * An uncommented item
	 */
	public static final TableField<SystableRecord, String> TABLE_TYPE = new TableFieldImpl<SystableRecord, String>("table_type", SQLDataType.CHAR, SYSTABLE);

	/**
	 * An uncommented item
	 */
	public static final TableField<SystableRecord, String> VIEW_DEF = new TableFieldImpl<SystableRecord, String>("view_def", SQLDataType.LONGVARCHAR, SYSTABLE);

	/**
	 * An uncommented item
	 */
	public static final TableField<SystableRecord, String> REMARKS = new TableFieldImpl<SystableRecord, String>("remarks", SQLDataType.LONGVARCHAR, SYSTABLE);

	/**
	 * An uncommented item
	 */
	public static final TableField<SystableRecord, String> REPLICATE = new TableFieldImpl<SystableRecord, String>("replicate", SQLDataType.CHAR, SYSTABLE);

	/**
	 * An uncommented item
	 */
	public static final TableField<SystableRecord, String> EXISTING_OBJ = new TableFieldImpl<SystableRecord, String>("existing_obj", SQLDataType.CHAR, SYSTABLE);

	/**
	 * An uncommented item
	 */
	public static final TableField<SystableRecord, String> REMOTE_LOCATION = new TableFieldImpl<SystableRecord, String>("remote_location", SQLDataType.LONGVARCHAR, SYSTABLE);

	/**
	 * An uncommented item
	 */
	public static final TableField<SystableRecord, String> REMOTE_OBJTYPE = new TableFieldImpl<SystableRecord, String>("remote_objtype", SQLDataType.CHAR, SYSTABLE);

	/**
	 * An uncommented item
	 */
	public static final TableField<SystableRecord, Integer> SRVID = new TableFieldImpl<SystableRecord, Integer>("srvid", SQLDataType.INTEGER, SYSTABLE);

	/**
	 * An uncommented item
	 */
	public static final TableField<SystableRecord, String> SERVER_TYPE = new TableFieldImpl<SystableRecord, String>("server_type", SQLDataType.CHAR, SYSTABLE);

	/**
	 * An uncommented item
	 */
	public static final TableField<SystableRecord, Short> PRIMARY_HASH_LIMIT = new TableFieldImpl<SystableRecord, Short>("primary_hash_limit", SQLDataType.SMALLINT, SYSTABLE);

	/**
	 * An uncommented item
	 */
	public static final TableField<SystableRecord, Short> PAGE_MAP_START = new TableFieldImpl<SystableRecord, Short>("page_map_start", SQLDataType.SMALLINT, SYSTABLE);

	/**
	 * An uncommented item
	 */
	public static final TableField<SystableRecord, String> SOURCE = new TableFieldImpl<SystableRecord, String>("source", SQLDataType.LONGVARCHAR, SYSTABLE);

	/**
	 * An uncommented item
	 */
	public static final TableField<SystableRecord, String> ENCRYPTED = new TableFieldImpl<SystableRecord, String>("encrypted", SQLDataType.CHAR, SYSTABLE);

	/**
	 * No further instances allowed
	 */
	private Systable() {
		super("SYSTABLE", Sys.SYS);
	}
}
