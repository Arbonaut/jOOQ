/**
 * This class is generated by jOOQ
 */
package org.jooq.util.oracle.sys.tables.records;


import java.math.BigDecimal;

import javax.annotation.Generated;

import org.jooq.impl.TableRecordImpl;
import org.jooq.util.oracle.sys.tables.AllArguments;


/**
 * This class is generated by jOOQ.
 *
 * Arguments in object accessible to the user
 */
@Generated(value    = "http://jooq.sourceforge.net",
           comments = "This class is generated by jOOQ")
public class AllArgumentsRecord extends TableRecordImpl<AllArgumentsRecord> {

	private static final long serialVersionUID = 665574575;

	/**
	 * Username of the owner of the object
	 */
	public void setOwner(String value) {
		setValue(AllArguments.OWNER, value);
	}

	/**
	 * Username of the owner of the object
	 */
	public String getOwner() {
		return getValue(AllArguments.OWNER);
	}

	/**
	 * Procedure or function name
	 */
	public void setObjectName(String value) {
		setValue(AllArguments.OBJECT_NAME, value);
	}

	/**
	 * Procedure or function name
	 */
	public String getObjectName() {
		return getValue(AllArguments.OBJECT_NAME);
	}

	/**
	 * Package name
	 */
	public void setPackageName(String value) {
		setValue(AllArguments.PACKAGE_NAME, value);
	}

	/**
	 * Package name
	 */
	public String getPackageName() {
		return getValue(AllArguments.PACKAGE_NAME);
	}

	/**
	 * Object number of the object
	 */
	public void setObjectId(BigDecimal value) {
		setValue(AllArguments.OBJECT_ID, value);
	}

	/**
	 * Object number of the object
	 */
	public BigDecimal getObjectId() {
		return getValue(AllArguments.OBJECT_ID);
	}

	/**
	 * Overload unique identifier
	 */
	public void setOverload(String value) {
		setValue(AllArguments.OVERLOAD, value);
	}

	/**
	 * Overload unique identifier
	 */
	public String getOverload() {
		return getValue(AllArguments.OVERLOAD);
	}

	/**
	 * Argument name
	 */
	public void setArgumentName(String value) {
		setValue(AllArguments.ARGUMENT_NAME, value);
	}

	/**
	 * Argument name
	 */
	public String getArgumentName() {
		return getValue(AllArguments.ARGUMENT_NAME);
	}

	/**
	 * Position in argument list, or null for function return value
	 */
	public void setPosition(BigDecimal value) {
		setValue(AllArguments.POSITION, value);
	}

	/**
	 * Position in argument list, or null for function return value
	 */
	public BigDecimal getPosition() {
		return getValue(AllArguments.POSITION);
	}

	/**
	 * Argument sequence, including all nesting levels
	 */
	public void setSequence(BigDecimal value) {
		setValue(AllArguments.SEQUENCE, value);
	}

	/**
	 * Argument sequence, including all nesting levels
	 */
	public BigDecimal getSequence() {
		return getValue(AllArguments.SEQUENCE);
	}

	/**
	 * Nesting depth of argument for composite types
	 */
	public void setDataLevel(BigDecimal value) {
		setValue(AllArguments.DATA_LEVEL, value);
	}

	/**
	 * Nesting depth of argument for composite types
	 */
	public BigDecimal getDataLevel() {
		return getValue(AllArguments.DATA_LEVEL);
	}

	/**
	 * Datatype of the argument
	 */
	public void setDataType(String value) {
		setValue(AllArguments.DATA_TYPE, value);
	}

	/**
	 * Datatype of the argument
	 */
	public String getDataType() {
		return getValue(AllArguments.DATA_TYPE);
	}

	/**
	 * Default value for the argument
	 */
	public void setDefaultValue(String value) {
		setValue(AllArguments.DEFAULT_VALUE, value);
	}

	/**
	 * Default value for the argument
	 */
	public String getDefaultValue() {
		return getValue(AllArguments.DEFAULT_VALUE);
	}

	/**
	 * Length of default value for the argument
	 */
	public void setDefaultLength(BigDecimal value) {
		setValue(AllArguments.DEFAULT_LENGTH, value);
	}

	/**
	 * Length of default value for the argument
	 */
	public BigDecimal getDefaultLength() {
		return getValue(AllArguments.DEFAULT_LENGTH);
	}

	/**
	 * Argument direction (IN, OUT, or IN/OUT)
	 */
	public void setInOut(String value) {
		setValue(AllArguments.IN_OUT, value);
	}

	/**
	 * Argument direction (IN, OUT, or IN/OUT)
	 */
	public String getInOut() {
		return getValue(AllArguments.IN_OUT);
	}

	/**
	 * Length of the column in bytes
	 */
	public void setDataLength(BigDecimal value) {
		setValue(AllArguments.DATA_LENGTH, value);
	}

	/**
	 * Length of the column in bytes
	 */
	public BigDecimal getDataLength() {
		return getValue(AllArguments.DATA_LENGTH);
	}

	/**
	 * Length: decimal digits (NUMBER) or binary digits (FLOAT)
	 */
	public void setDataPrecision(BigDecimal value) {
		setValue(AllArguments.DATA_PRECISION, value);
	}

	/**
	 * Length: decimal digits (NUMBER) or binary digits (FLOAT)
	 */
	public BigDecimal getDataPrecision() {
		return getValue(AllArguments.DATA_PRECISION);
	}

	/**
	 * Digits to right of decimal point in a number
	 */
	public void setDataScale(BigDecimal value) {
		setValue(AllArguments.DATA_SCALE, value);
	}

	/**
	 * Digits to right of decimal point in a number
	 */
	public BigDecimal getDataScale() {
		return getValue(AllArguments.DATA_SCALE);
	}

	/**
	 * Argument radix for a number
	 */
	public void setRadix(BigDecimal value) {
		setValue(AllArguments.RADIX, value);
	}

	/**
	 * Argument radix for a number
	 */
	public BigDecimal getRadix() {
		return getValue(AllArguments.RADIX);
	}

	/**
	 * Character set name for the argument
	 */
	public void setCharacterSetName(String value) {
		setValue(AllArguments.CHARACTER_SET_NAME, value);
	}

	/**
	 * Character set name for the argument
	 */
	public String getCharacterSetName() {
		return getValue(AllArguments.CHARACTER_SET_NAME);
	}

	/**
	 * Owner name for the argument type in case of object types
	 */
	public void setTypeOwner(String value) {
		setValue(AllArguments.TYPE_OWNER, value);
	}

	/**
	 * Owner name for the argument type in case of object types
	 */
	public String getTypeOwner() {
		return getValue(AllArguments.TYPE_OWNER);
	}

	/**
	 * Object name for the argument type in case of object types
	 */
	public void setTypeName(String value) {
		setValue(AllArguments.TYPE_NAME, value);
	}

	/**
	 * Object name for the argument type in case of object types
	 */
	public String getTypeName() {
		return getValue(AllArguments.TYPE_NAME);
	}

	/**
	 * Subordinate object name for the argument type in case of object types
	 */
	public void setTypeSubname(String value) {
		setValue(AllArguments.TYPE_SUBNAME, value);
	}

	/**
	 * Subordinate object name for the argument type in case of object types
	 */
	public String getTypeSubname() {
		return getValue(AllArguments.TYPE_SUBNAME);
	}

	/**
	 * Database link name for the argument type in case of object types
	 */
	public void setTypeLink(String value) {
		setValue(AllArguments.TYPE_LINK, value);
	}

	/**
	 * Database link name for the argument type in case of object types
	 */
	public String getTypeLink() {
		return getValue(AllArguments.TYPE_LINK);
	}

	/**
	 * PL/SQL type name for numeric arguments
	 */
	public void setPlsType(String value) {
		setValue(AllArguments.PLS_TYPE, value);
	}

	/**
	 * PL/SQL type name for numeric arguments
	 */
	public String getPlsType() {
		return getValue(AllArguments.PLS_TYPE);
	}

	/**
	 * Character limit for string datatypes
	 */
	public void setCharLength(BigDecimal value) {
		setValue(AllArguments.CHAR_LENGTH, value);
	}

	/**
	 * Character limit for string datatypes
	 */
	public BigDecimal getCharLength() {
		return getValue(AllArguments.CHAR_LENGTH);
	}

	/**
	 * Is the byte limit (B) or char limit (C) official for this string?
	 */
	public void setCharUsed(String value) {
		setValue(AllArguments.CHAR_USED, value);
	}

	/**
	 * Is the byte limit (B) or char limit (C) official for this string?
	 */
	public String getCharUsed() {
		return getValue(AllArguments.CHAR_USED);
	}
	/**
	 * Create a detached AllArgumentsRecord
	 */
	public AllArgumentsRecord() {
		super(AllArguments.ALL_ARGUMENTS);
	}
}
