/**
 * This class is generated by jOOQ
 */
package org.jooq.util.oracle.sys.tables;


import java.math.BigDecimal;
import java.sql.Date;

import javax.annotation.Generated;

import org.jooq.TableField;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableFieldImpl;
import org.jooq.impl.TableImpl;
import org.jooq.util.oracle.sys.Sys;
import org.jooq.util.oracle.sys.tables.records.AllObjectsRecord;


/**
 * This class is generated by jOOQ.
 *
 * Objects accessible to the user
 */
@Generated(value    = "http://jooq.sourceforge.net",
           comments = "This class is generated by jOOQ")
public class AllObjects extends TableImpl<AllObjectsRecord> {

	private static final long serialVersionUID = -233952575;

	/**
	 * The singleton instance of ALL_OBJECTS
	 */
	public static final AllObjects ALL_OBJECTS = new AllObjects();

	/**
	 * The class holding records for this type
	 */
	private static final Class<AllObjectsRecord> __RECORD_TYPE = AllObjectsRecord.class;

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AllObjectsRecord> getRecordType() {
		return __RECORD_TYPE;
	}

	/**
	 * Username of the owner of the object
	 */
	public static final TableField<AllObjectsRecord, String> OWNER = new TableFieldImpl<AllObjectsRecord, String>("OWNER", SQLDataType.VARCHAR, ALL_OBJECTS);

	/**
	 * Name of the object
	 */
	public static final TableField<AllObjectsRecord, String> OBJECT_NAME = new TableFieldImpl<AllObjectsRecord, String>("OBJECT_NAME", SQLDataType.VARCHAR, ALL_OBJECTS);

	/**
	 * Name of the sub-object (for example, partititon)
	 */
	public static final TableField<AllObjectsRecord, String> SUBOBJECT_NAME = new TableFieldImpl<AllObjectsRecord, String>("SUBOBJECT_NAME", SQLDataType.VARCHAR, ALL_OBJECTS);

	/**
	 * Object number of the object
	 */
	public static final TableField<AllObjectsRecord, BigDecimal> OBJECT_ID = new TableFieldImpl<AllObjectsRecord, BigDecimal>("OBJECT_ID", SQLDataType.NUMERIC, ALL_OBJECTS);

	/**
	 * Object number of the segment which contains the object
	 */
	public static final TableField<AllObjectsRecord, BigDecimal> DATA_OBJECT_ID = new TableFieldImpl<AllObjectsRecord, BigDecimal>("DATA_OBJECT_ID", SQLDataType.NUMERIC, ALL_OBJECTS);

	/**
	 * Type of the object
	 */
	public static final TableField<AllObjectsRecord, String> OBJECT_TYPE = new TableFieldImpl<AllObjectsRecord, String>("OBJECT_TYPE", SQLDataType.VARCHAR, ALL_OBJECTS);

	/**
	 * Timestamp for the creation of the object
	 */
	public static final TableField<AllObjectsRecord, Date> CREATED = new TableFieldImpl<AllObjectsRecord, Date>("CREATED", SQLDataType.DATE, ALL_OBJECTS);

	/**
	 * Timestamp for the last DDL change (including GRANT and REVOKE) to the object
	 */
	public static final TableField<AllObjectsRecord, Date> LAST_DDL_TIME = new TableFieldImpl<AllObjectsRecord, Date>("LAST_DDL_TIME", SQLDataType.DATE, ALL_OBJECTS);

	/**
	 * Timestamp for the specification of the object
	 */
	public static final TableField<AllObjectsRecord, String> TIMESTAMP = new TableFieldImpl<AllObjectsRecord, String>("TIMESTAMP", SQLDataType.VARCHAR, ALL_OBJECTS);

	/**
	 * Status of the object
	 */
	public static final TableField<AllObjectsRecord, String> STATUS = new TableFieldImpl<AllObjectsRecord, String>("STATUS", SQLDataType.VARCHAR, ALL_OBJECTS);

	/**
	 * Can the current session only see data that it placed in this object itself?
	 */
	public static final TableField<AllObjectsRecord, String> TEMPORARY = new TableFieldImpl<AllObjectsRecord, String>("TEMPORARY", SQLDataType.VARCHAR, ALL_OBJECTS);

	/**
	 * Was the name of this object system generated?
	 */
	public static final TableField<AllObjectsRecord, String> GENERATED = new TableFieldImpl<AllObjectsRecord, String>("GENERATED", SQLDataType.VARCHAR, ALL_OBJECTS);

	/**
	 * Is this a secondary object created as part of icreate for domain indexes?
	 */
	public static final TableField<AllObjectsRecord, String> SECONDARY = new TableFieldImpl<AllObjectsRecord, String>("SECONDARY", SQLDataType.VARCHAR, ALL_OBJECTS);

	/**
	 * No further instances allowed
	 */
	private AllObjects() {
		super("ALL_OBJECTS", Sys.SYS);
	}
}
