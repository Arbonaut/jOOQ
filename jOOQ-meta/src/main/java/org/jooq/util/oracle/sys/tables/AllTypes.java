/**
 * This class is generated by jOOQ
 */
package org.jooq.util.oracle.sys.tables;


import java.math.BigDecimal;

import javax.annotation.Generated;

import org.jooq.TableField;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableFieldImpl;
import org.jooq.impl.TableImpl;
import org.jooq.util.oracle.sys.Sys;
import org.jooq.util.oracle.sys.tables.records.AllTypesRecord;


/**
 * This class is generated by jOOQ.
 *
 * Description of types accessible to the user
 */
@Generated(value    = "http://jooq.sourceforge.net",
           comments = "This class is generated by jOOQ")
public class AllTypes extends TableImpl<AllTypesRecord> {

	private static final long serialVersionUID = -1740638702;

	/**
	 * The singleton instance of ALL_TYPES
	 */
	public static final AllTypes ALL_TYPES = new AllTypes();

	/**
	 * The class holding records for this type
	 */
	private static final Class<AllTypesRecord> __RECORD_TYPE = AllTypesRecord.class;

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AllTypesRecord> getRecordType() {
		return __RECORD_TYPE;
	}

	/**
	 * Owner of the type
	 */
	public static final TableField<AllTypesRecord, String> OWNER = new TableFieldImpl<AllTypesRecord, String>("OWNER", SQLDataType.VARCHAR, ALL_TYPES);

	/**
	 * Name of the type
	 */
	public static final TableField<AllTypesRecord, String> TYPE_NAME = new TableFieldImpl<AllTypesRecord, String>("TYPE_NAME", SQLDataType.VARCHAR, ALL_TYPES);

	/**
	 * Object identifier (OID) of the type
	 */
	public static final TableField<AllTypesRecord, byte[]> TYPE_OID = new TableFieldImpl<AllTypesRecord, byte[]>("TYPE_OID", SQLDataType.BLOB, ALL_TYPES);

	/**
	 * Typecode of the type
	 */
	public static final TableField<AllTypesRecord, String> TYPECODE = new TableFieldImpl<AllTypesRecord, String>("TYPECODE", SQLDataType.VARCHAR, ALL_TYPES);

	/**
	 * Number of attributes in the type
	 */
	public static final TableField<AllTypesRecord, BigDecimal> ATTRIBUTES = new TableFieldImpl<AllTypesRecord, BigDecimal>("ATTRIBUTES", SQLDataType.NUMERIC, ALL_TYPES);

	/**
	 * Number of methods in the type
	 */
	public static final TableField<AllTypesRecord, BigDecimal> METHODS = new TableFieldImpl<AllTypesRecord, BigDecimal>("METHODS", SQLDataType.NUMERIC, ALL_TYPES);

	/**
	 * Is the type a predefined type?
	 */
	public static final TableField<AllTypesRecord, String> PREDEFINED = new TableFieldImpl<AllTypesRecord, String>("PREDEFINED", SQLDataType.VARCHAR, ALL_TYPES);

	/**
	 * Is the type an incomplete type?
	 */
	public static final TableField<AllTypesRecord, String> INCOMPLETE = new TableFieldImpl<AllTypesRecord, String>("INCOMPLETE", SQLDataType.VARCHAR, ALL_TYPES);

	/**
	 * Is the type a final type?
	 */
	public static final TableField<AllTypesRecord, String> FINAL = new TableFieldImpl<AllTypesRecord, String>("FINAL", SQLDataType.VARCHAR, ALL_TYPES);

	/**
	 * Is the type an instantiable type?
	 */
	public static final TableField<AllTypesRecord, String> INSTANTIABLE = new TableFieldImpl<AllTypesRecord, String>("INSTANTIABLE", SQLDataType.VARCHAR, ALL_TYPES);

	/**
	 * Owner of the supertype (null if type is not a subtype)
	 */
	public static final TableField<AllTypesRecord, String> SUPERTYPE_OWNER = new TableFieldImpl<AllTypesRecord, String>("SUPERTYPE_OWNER", SQLDataType.VARCHAR, ALL_TYPES);

	/**
	 * Name of the supertype (null if type is not a subtype)
	 */
	public static final TableField<AllTypesRecord, String> SUPERTYPE_NAME = new TableFieldImpl<AllTypesRecord, String>("SUPERTYPE_NAME", SQLDataType.VARCHAR, ALL_TYPES);

	/**
	 * Number of local (not inherited) attributes (if any) in the subtype
	 */
	public static final TableField<AllTypesRecord, BigDecimal> LOCAL_ATTRIBUTES = new TableFieldImpl<AllTypesRecord, BigDecimal>("LOCAL_ATTRIBUTES", SQLDataType.NUMERIC, ALL_TYPES);

	/**
	 * Number of local (not inherited) methods (if any) in the subtype
	 */
	public static final TableField<AllTypesRecord, BigDecimal> LOCAL_METHODS = new TableFieldImpl<AllTypesRecord, BigDecimal>("LOCAL_METHODS", SQLDataType.NUMERIC, ALL_TYPES);

	/**
	 * Type id value of the type
	 */
	public static final TableField<AllTypesRecord, byte[]> TYPEID = new TableFieldImpl<AllTypesRecord, byte[]>("TYPEID", SQLDataType.BLOB, ALL_TYPES);

	/**
	 * No further instances allowed
	 */
	private AllTypes() {
		super("ALL_TYPES", Sys.SYS);
	}
}
