/**
 * This class is generated by jOOQ
 */
package org.jooq.util.oracle.sys.tables.records;


import java.math.BigDecimal;

import javax.annotation.Generated;

import org.jooq.impl.TableRecordImpl;
import org.jooq.util.oracle.sys.tables.AllTypeAttrs;


/**
 * This class is generated by jOOQ.
 *
 * Description of attributes of types accessible to the user
 */
@Generated(value    = "http://jooq.sourceforge.net",
           comments = "This class is generated by jOOQ")
public class AllTypeAttrsRecord extends TableRecordImpl<AllTypeAttrsRecord> {

	private static final long serialVersionUID = 1980364720;

	/**
	 * Owner of the type
	 */
	public void setOwner(String value) {
		setValue(AllTypeAttrs.OWNER, value);
	}

	/**
	 * Owner of the type
	 */
	public String getOwner() {
		return getValue(AllTypeAttrs.OWNER);
	}

	/**
	 * Name of the type
	 */
	public void setTypeName(String value) {
		setValue(AllTypeAttrs.TYPE_NAME, value);
	}

	/**
	 * Name of the type
	 */
	public String getTypeName() {
		return getValue(AllTypeAttrs.TYPE_NAME);
	}

	/**
	 * Name of the attribute
	 */
	public void setAttrName(String value) {
		setValue(AllTypeAttrs.ATTR_NAME, value);
	}

	/**
	 * Name of the attribute
	 */
	public String getAttrName() {
		return getValue(AllTypeAttrs.ATTR_NAME);
	}

	/**
	 * Type modifier of the attribute
	 */
	public void setAttrTypeMod(String value) {
		setValue(AllTypeAttrs.ATTR_TYPE_MOD, value);
	}

	/**
	 * Type modifier of the attribute
	 */
	public String getAttrTypeMod() {
		return getValue(AllTypeAttrs.ATTR_TYPE_MOD);
	}

	/**
	 * Owner of the type of the attribute
	 */
	public void setAttrTypeOwner(String value) {
		setValue(AllTypeAttrs.ATTR_TYPE_OWNER, value);
	}

	/**
	 * Owner of the type of the attribute
	 */
	public String getAttrTypeOwner() {
		return getValue(AllTypeAttrs.ATTR_TYPE_OWNER);
	}

	/**
	 * Name of the type of the attribute
	 */
	public void setAttrTypeName(String value) {
		setValue(AllTypeAttrs.ATTR_TYPE_NAME, value);
	}

	/**
	 * Name of the type of the attribute
	 */
	public String getAttrTypeName() {
		return getValue(AllTypeAttrs.ATTR_TYPE_NAME);
	}

	/**
	 * Length of the CHAR attribute or maximum length of the VARCHAR
or VARCHAR2 attribute
	 */
	public void setLength(BigDecimal value) {
		setValue(AllTypeAttrs.LENGTH, value);
	}

	/**
	 * Length of the CHAR attribute or maximum length of the VARCHAR
or VARCHAR2 attribute
	 */
	public BigDecimal getLength() {
		return getValue(AllTypeAttrs.LENGTH);
	}

	/**
	 * Decimal precision of the NUMBER or DECIMAL attribute or
binary precision of the FLOAT attribute
	 */
	public void setPrecision(BigDecimal value) {
		setValue(AllTypeAttrs.PRECISION, value);
	}

	/**
	 * Decimal precision of the NUMBER or DECIMAL attribute or
binary precision of the FLOAT attribute
	 */
	public BigDecimal getPrecision() {
		return getValue(AllTypeAttrs.PRECISION);
	}

	/**
	 * Scale of the NUMBER or DECIMAL attribute
	 */
	public void setScale(BigDecimal value) {
		setValue(AllTypeAttrs.SCALE, value);
	}

	/**
	 * Scale of the NUMBER or DECIMAL attribute
	 */
	public BigDecimal getScale() {
		return getValue(AllTypeAttrs.SCALE);
	}

	/**
	 * Character set name of the attribute
	 */
	public void setCharacterSetName(String value) {
		setValue(AllTypeAttrs.CHARACTER_SET_NAME, value);
	}

	/**
	 * Character set name of the attribute
	 */
	public String getCharacterSetName() {
		return getValue(AllTypeAttrs.CHARACTER_SET_NAME);
	}

	/**
	 * Syntactical order number or position of the attribute as specified in the
type specification or CREATE TYPE statement (not to be used as ID number)
	 */
	public void setAttrNo(BigDecimal value) {
		setValue(AllTypeAttrs.ATTR_NO, value);
	}

	/**
	 * Syntactical order number or position of the attribute as specified in the
type specification or CREATE TYPE statement (not to be used as ID number)
	 */
	public BigDecimal getAttrNo() {
		return getValue(AllTypeAttrs.ATTR_NO);
	}

	/**
	 * Is the attribute inherited from the supertype ?
	 */
	public void setInherited(String value) {
		setValue(AllTypeAttrs.INHERITED, value);
	}

	/**
	 * Is the attribute inherited from the supertype ?
	 */
	public String getInherited() {
		return getValue(AllTypeAttrs.INHERITED);
	}
	/**
	 * Create a detached AllTypeAttrsRecord
	 */
	public AllTypeAttrsRecord() {
		super(AllTypeAttrs.ALL_TYPE_ATTRS);
	}
}
